
NUCLEO-G431_XL320_MKR_Shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b04  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08003ce4  08003ce4  00004ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800403c  0800403c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800403c  0800403c  0000503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004044  08004044  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004044  08004044  00005044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004048  08004048  00005048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800404c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  2000005c  080040a8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080040a8  000064b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d280  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002049  00000000  00000000  0001330c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  00015358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b3  00000000  00000000  00015d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccac  00000000  00000000  0001652b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccd6  00000000  00000000  000331d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b550f  00000000  00000000  0003fead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f53bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  000f5400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f80d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003ccc 	.word	0x08003ccc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08003ccc 	.word	0x08003ccc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <MX_GPIO_Init+0xa8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	4a23      	ldr	r2, [pc, #140]	@ (8000658 <MX_GPIO_Init+0xa8>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d2:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <MX_GPIO_Init+0xa8>)
 80005d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <MX_GPIO_Init+0xa8>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000658 <MX_GPIO_Init+0xa8>)
 80005e4:	f043 0302 	orr.w	r3, r3, #2
 80005e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <MX_GPIO_Init+0xa8>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	f003 0302 	and.w	r3, r3, #2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f000 ff32 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800060a:	4814      	ldr	r0, [pc, #80]	@ (800065c <MX_GPIO_Init+0xac>)
 800060c:	f000 ff2c 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TX_EN_Pin;
 8000610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TX_EN_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062c:	f000 fd9a 	bl	8001164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <MX_GPIO_Init+0xac>)
 800064a:	f000 fd8b 	bl	8001164 <HAL_GPIO_Init>

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40021000 	.word	0x40021000
 800065c:	48000400 	.word	0x48000400

08000660 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af04      	add	r7, sp, #16

	/* USER CODE BEGIN 1 */
	uint16_t led = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	80fb      	strh	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800066a:	f000 fc04 	bl	8000e76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800066e:	f000 f82d 	bl	80006cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000672:	f7ff ff9d 	bl	80005b0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000676:	f000 f965 	bl	8000944 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800067a:	f000 f915 	bl	80008a8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Transmit(&huart2, simpleCodeInstr, sizeof(simpleCodeInstr), 10);
 800067e:	230a      	movs	r3, #10
 8000680:	2220      	movs	r2, #32
 8000682:	490e      	ldr	r1, [pc, #56]	@ (80006bc <main+0x5c>)
 8000684:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <main+0x60>)
 8000686:	f001 ff29 	bl	80024dc <HAL_UART_Transmit>
	XL320_Init_debug(&hxl320, &huart1, &huart2, TX_EN_GPIO_Port, TX_EN_Pin, XL320_ID, XL320_BAUDRATE);
 800068a:	2340      	movs	r3, #64	@ 0x40
 800068c:	9302      	str	r3, [sp, #8]
 800068e:	2301      	movs	r3, #1
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800069c:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <main+0x60>)
 800069e:	4909      	ldr	r1, [pc, #36]	@ (80006c4 <main+0x64>)
 80006a0:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <main+0x68>)
 80006a2:	f000 fa33 	bl	8000b0c <XL320_Init_debug>
	HAL_Delay(100);
 80006a6:	2064      	movs	r0, #100	@ 0x64
 80006a8:	f000 fc56 	bl	8000f58 <HAL_Delay>
	while (1)
	{

//		XL320_Set_Led_Color(&hxl320, XL320_LED_CYAN);
//		HAL_Delay(100);
		XL320_Ping(&hxl320);
 80006ac:	4806      	ldr	r0, [pc, #24]	@ (80006c8 <main+0x68>)
 80006ae:	f000 fa57 	bl	8000b60 <XL320_Ping>
		HAL_Delay(100);
 80006b2:	2064      	movs	r0, #100	@ 0x64
 80006b4:	f000 fc50 	bl	8000f58 <HAL_Delay>
		XL320_Ping(&hxl320);
 80006b8:	bf00      	nop
 80006ba:	e7f7      	b.n	80006ac <main+0x4c>
 80006bc:	08003d4c 	.word	0x08003d4c
 80006c0:	20000110 	.word	0x20000110
 80006c4:	2000007c 	.word	0x2000007c
 80006c8:	200001a4 	.word	0x200001a4

080006cc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2238      	movs	r2, #56	@ 0x38
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fe76 	bl	80033cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 fed2 	bl	8001498 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800070a:	2304      	movs	r3, #4
 800070c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800070e:	2355      	movs	r3, #85	@ 0x55
 8000710:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0318 	add.w	r3, r7, #24
 8000722:	4618      	mov	r0, r3
 8000724:	f000 ff6c 	bl	8001600 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800072e:	f000 f818 	bl	8000762 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fa6a 	bl	8001c24 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8000756:	f000 f804 	bl	8000762 <Error_Handler>
	}
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000766:	b672      	cpsid	i
}
 8000768:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <Error_Handler+0x8>
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_MspInit+0x44>)
 8000778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_MspInit+0x44>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6613      	str	r3, [r2, #96]	@ 0x60
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <HAL_MspInit+0x44>)
 8000790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000792:	4a08      	ldr	r2, [pc, #32]	@ (80007b4 <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	6593      	str	r3, [r2, #88]	@ 0x58
 800079a:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007a6:	f000 ff1b 	bl	80015e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 fb85 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d207      	bcs.n	8000858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000848:	f002 fdc8 	bl	80033dc <__errno>
 800084c:	4603      	mov	r3, r0
 800084e:	220c      	movs	r2, #12
 8000850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000856:	e009      	b.n	800086c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <_sbrk+0x64>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	4a05      	ldr	r2, [pc, #20]	@ (800087c <_sbrk+0x64>)
 8000868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800086a:	68fb      	ldr	r3, [r7, #12]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20008000 	.word	0x20008000
 8000878:	00000400 	.word	0x00000400
 800087c:	20000078 	.word	0x20000078
 8000880:	200004b0 	.word	0x200004b0

08000884 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	@ (800093c <MX_USART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008b4:	4a22      	ldr	r2, [pc, #136]	@ (8000940 <MX_USART1_UART_Init+0x98>)
 80008b6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008cc:	220c      	movs	r2, #12
 80008ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4812      	ldr	r0, [pc, #72]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 80008f0:	f001 fda4 	bl	800243c <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80008fa:	f7ff ff32 	bl	8000762 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	480d      	ldr	r0, [pc, #52]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000902:	f002 fc65 	bl	80031d0 <HAL_UARTEx_SetTxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800090c:	f7ff ff29 	bl	8000762 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000914:	f002 fc9a 	bl	800324c <HAL_UARTEx_SetRxFifoThreshold>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800091e:	f7ff ff20 	bl	8000762 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART1_UART_Init+0x90>)
 8000924:	f002 fc1b 	bl	800315e <HAL_UARTEx_DisableFifoMode>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800092e:	f7ff ff18 	bl	8000762 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000007c 	.word	0x2000007c
 800093c:	40013800 	.word	0x40013800
 8000940:	000f4240 	.word	0x000f4240

08000944 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <MX_USART2_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 800098e:	f001 fd55 	bl	800243c <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f7ff fee3 	bl	8000762 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 80009a0:	f002 fc16 	bl	80031d0 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f7ff feda 	bl	8000762 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 80009b2:	f002 fc4b 	bl	800324c <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f7ff fed1 	bl	8000762 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_USART2_UART_Init+0x90>)
 80009c2:	f002 fbcc 	bl	800315e <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f7ff fec9 	bl	8000762 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000110 	.word	0x20000110
 80009d8:	40004400 	.word	0x40004400

080009dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	@ 0x70
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f4:	f107 0318 	add.w	r3, r7, #24
 80009f8:	2244      	movs	r2, #68	@ 0x44
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f002 fce5 	bl	80033cc <memset>
  if(uartHandle->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a3e      	ldr	r2, [pc, #248]	@ (8000b00 <HAL_UART_MspInit+0x124>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d138      	bne.n	8000a7e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fb1f 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a24:	f7ff fe9d 	bl	8000762 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a28:	4b36      	ldr	r3, [pc, #216]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2c:	4a35      	ldr	r2, [pc, #212]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a32:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a34:	4b33      	ldr	r3, [pc, #204]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3c:	617b      	str	r3, [r7, #20]
 8000a3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a44:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000a4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a50:	f003 0301 	and.w	r3, r3, #1
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a58:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 fb74 	bl	8001164 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a7c:	e03b      	b.n	8000af6 <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a21      	ldr	r2, [pc, #132]	@ (8000b08 <HAL_UART_MspInit+0x12c>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d136      	bne.n	8000af6 <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fae1 	bl	800205c <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000aa0:	f7ff fe5f 	bl	8000762 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa8:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac0:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <HAL_UART_MspInit+0x128>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af2:	f000 fb37 	bl	8001164 <HAL_GPIO_Init>
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	@ 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40004400 	.word	0x40004400

08000b0c <XL320_Init_debug>:
	XL320_Handle->max_torque = 1023;
	// Set in RX mode
	XL320_Set_UART_RxTxMode(XL320_Handle, XL320_UART_RX);
}

void XL320_Init_debug(__XL320_HandleTypeDef *XL320_Handle, UART_HandleTypeDef *huart, UART_HandleTypeDef *huart_debug, GPIO_TypeDef *TxEnPort, uint16_t TxEnPin, uint8_t id, uint8_t baudrate){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	603b      	str	r3, [r7, #0]
	XL320_Handle->huart = huart;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	601a      	str	r2, [r3, #0]
	XL320_Handle->huart_debug = huart_debug;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	605a      	str	r2, [r3, #4]
	XL320_Handle->tx_En_Port = TxEnPort;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	609a      	str	r2, [r3, #8]
	XL320_Handle->tx_En_Pin = TxEnPin;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	8b3a      	ldrh	r2, [r7, #24]
 8000b30:	819a      	strh	r2, [r3, #12]
	XL320_Handle->id = id;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	7f3a      	ldrb	r2, [r7, #28]
 8000b36:	749a      	strb	r2, [r3, #18]
	XL320_Handle->baudrate = baudrate;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b3e:	74da      	strb	r2, [r3, #19]
	XL320_Handle->control_mode = 2;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2202      	movs	r2, #2
 8000b44:	75da      	strb	r2, [r3, #23]
	XL320_Handle->max_torque = 1023;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000b4c:	839a      	strh	r2, [r3, #28]
	// Set in RX mode
	XL320_Set_UART_RxTxMode(XL320_Handle, XL320_UART_RX);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f000 f8d1 	bl	8000cf8 <XL320_Set_UART_RxTxMode>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <XL320_Ping>:

HAL_StatusTypeDef XL320_Ping(__XL320_HandleTypeDef *XL320_Handle){
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af04      	add	r7, sp, #16
 8000b66:	6078      	str	r0, [r7, #4]
	// Header + reserved
	XL320_Handle->tx_buffer[0] = XL320_HEADER_1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	22ff      	movs	r2, #255	@ 0xff
 8000b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	XL320_Handle->tx_buffer[1] = XL320_HEADER_2;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	22ff      	movs	r2, #255	@ 0xff
 8000b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	XL320_Handle->tx_buffer[2] = XL320_HEADER_3;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	22fd      	movs	r2, #253	@ 0xfd
 8000b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	XL320_Handle->tx_buffer[3] = XL320_RSRV;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f

	// ID
	XL320_Handle->tx_buffer[4] = XL320_Handle->id;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	7c9a      	ldrb	r2, [r3, #18]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	// Length (Nb param + Instru + CRC)
	XL320_Handle->tx_buffer[5] = 0x03; 					// Length (Low)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2203      	movs	r2, #3
 8000b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	XL320_Handle->tx_buffer[6] = 0x00;					// Length (High)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

	// Instruction : write
	XL320_Handle->tx_buffer[7] = XL320_INST_PING;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	XL320_Handle->tx_data_length = 8;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2208      	movs	r2, #8
 8000bae:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
	XL320_Update_CRC(XL320_Handle);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f8b2 	bl	8000d1c <XL320_Update_CRC>
	XL320_Handle->tx_buffer[8] = (XL320_Handle->crc) & 0x00FF;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	XL320_Handle->tx_buffer[9] = (XL320_Handle->crc >> 8) & 0x00FF;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

	XL320_Set_UART_RxTxMode(XL320_Handle, XL320_UART_TX);
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 f88e 	bl	8000cf8 <XL320_Set_UART_RxTxMode>
	HAL_UART_Transmit(XL320_Handle->huart, XL320_Handle->tx_buffer, XL320_Handle->tx_data_length + XL320_CRC_LENGTH, 10);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6818      	ldr	r0, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000bec:	3302      	adds	r3, #2
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	230a      	movs	r3, #10
 8000bf2:	f001 fc73 	bl	80024dc <HAL_UART_Transmit>
	XL320_Set_UART_RxTxMode(XL320_Handle, XL320_UART_RX);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f000 f87d 	bl	8000cf8 <XL320_Set_UART_RxTxMode>

	if(HAL_ERROR == HAL_UART_Receive(XL320_Handle->huart, XL320_Handle->rx_buffer, 14, 10)){
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f103 017d 	add.w	r1, r3, #125	@ 0x7d
 8000c08:	230a      	movs	r3, #10
 8000c0a:	220e      	movs	r2, #14
 8000c0c:	f001 fcf4 	bl	80025f8 <HAL_UART_Receive>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d108      	bne.n	8000c28 <XL320_Ping+0xc8>
		HAL_UART_Transmit(XL320_Handle->huart_debug, msg_ping_error, sizeof(msg_ping_error), 10);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6858      	ldr	r0, [r3, #4]
 8000c1a:	230a      	movs	r3, #10
 8000c1c:	2220      	movs	r2, #32
 8000c1e:	4932      	ldr	r1, [pc, #200]	@ (8000ce8 <XL320_Ping+0x188>)
 8000c20:	f001 fc5c 	bl	80024dc <HAL_UART_Transmit>
		return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e05b      	b.n	8000ce0 <XL320_Ping+0x180>
	}

	XL320_Handle->rx_data_length = XL320_Handle->rx_buffer[5]+(XL320_Handle->rx_buffer[6]<<8);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd

	if(XL320_Check_CRC(XL320_Handle) == HAL_ERROR){
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 f8a7 	bl	8000d88 <XL320_Check_CRC>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d108      	bne.n	8000c52 <XL320_Ping+0xf2>
		HAL_UART_Transmit(XL320_Handle->huart_debug, msg_ping_crc_error, sizeof(msg_ping_crc_error), 10);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6858      	ldr	r0, [r3, #4]
 8000c44:	230a      	movs	r3, #10
 8000c46:	221f      	movs	r2, #31
 8000c48:	4928      	ldr	r1, [pc, #160]	@ (8000cec <XL320_Ping+0x18c>)
 8000c4a:	f001 fc47 	bl	80024dc <HAL_UART_Transmit>
		return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e046      	b.n	8000ce0 <XL320_Ping+0x180>
	}
	HAL_UART_Transmit(XL320_Handle->huart_debug, msg_ping_correct, sizeof(msg_ping_correct), 10);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6858      	ldr	r0, [r3, #4]
 8000c56:	230a      	movs	r3, #10
 8000c58:	221b      	movs	r2, #27
 8000c5a:	4925      	ldr	r1, [pc, #148]	@ (8000cf0 <XL320_Ping+0x190>)
 8000c5c:	f001 fc3e 	bl	80024dc <HAL_UART_Transmit>

	XL320_Handle->error_code = XL320_Handle->rx_buffer[8]; // ERR Code
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f893 2085 	ldrb.w	r2, [r3, #133]	@ 0x85
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	745a      	strb	r2, [r3, #17]
	XL320_Handle->model_number = XL320_Handle->rx_buffer[9] + (XL320_Handle->rx_buffer[10]<<8);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 8000c70:	461a      	mov	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	81da      	strh	r2, [r3, #14]
	XL320_Handle->firmware_version = XL320_Handle->rx_buffer[11];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	741a      	strb	r2, [r3, #16]

	XL320_Handle->tx_data_debug_length = snprintf(XL320_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f103 00be 	add.w	r0, r3, #190	@ 0xbe
			"Model number :     %6d \r\n"
			"Firmware version : %6d \r\n"
			"Error code :       %6d \r\n"
			"ID :               %6d \r\n",
			XL320_Handle->model_number, XL320_Handle->firmware_version, XL320_Handle->error_code, XL320_Handle->id);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	89db      	ldrh	r3, [r3, #14]
	XL320_Handle->tx_data_debug_length = snprintf(XL320_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8000c98:	461c      	mov	r4, r3
			XL320_Handle->model_number, XL320_Handle->firmware_version, XL320_Handle->error_code, XL320_Handle->id);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7c1b      	ldrb	r3, [r3, #16]
	XL320_Handle->tx_data_debug_length = snprintf(XL320_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8000c9e:	461a      	mov	r2, r3
			XL320_Handle->model_number, XL320_Handle->firmware_version, XL320_Handle->error_code, XL320_Handle->id);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	7c5b      	ldrb	r3, [r3, #17]
	XL320_Handle->tx_data_debug_length = snprintf(XL320_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8000ca4:	4619      	mov	r1, r3
			XL320_Handle->model_number, XL320_Handle->firmware_version, XL320_Handle->error_code, XL320_Handle->id);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7c9b      	ldrb	r3, [r3, #18]
	XL320_Handle->tx_data_debug_length = snprintf(XL320_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8000caa:	9302      	str	r3, [sp, #8]
 8000cac:	9101      	str	r1, [sp, #4]
 8000cae:	9200      	str	r2, [sp, #0]
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	4a10      	ldr	r2, [pc, #64]	@ (8000cf4 <XL320_Ping+0x194>)
 8000cb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cb8:	f002 fb54 	bl	8003364 <sniprintf>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f883 21be 	strb.w	r2, [r3, #446]	@ 0x1be
	HAL_UART_Transmit(XL320_Handle->huart_debug, XL320_Handle->tx_buffer_debug, XL320_Handle->tx_data_debug_length, 10);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6858      	ldr	r0, [r3, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f103 01be 	add.w	r1, r3, #190	@ 0xbe
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f893 31be 	ldrb.w	r3, [r3, #446]	@ 0x1be
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	230a      	movs	r3, #10
 8000cda:	f001 fbff 	bl	80024dc <HAL_UART_Transmit>

	return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	08003fa0 	.word	0x08003fa0
 8000cec:	08003fc0 	.word	0x08003fc0
 8000cf0:	08003f84 	.word	0x08003f84
 8000cf4:	08003ce4 	.word	0x08003ce4

08000cf8 <XL320_Set_UART_RxTxMode>:

void XL320_Set_UART_RxTxMode(__XL320_HandleTypeDef *XL320_Handle, GPIO_PinState mode){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	460b      	mov	r3, r1
 8000d02:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(XL320_Handle->tx_En_Port, XL320_Handle->tx_En_Pin, mode);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6898      	ldr	r0, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	899b      	ldrh	r3, [r3, #12]
 8000d0c:	78fa      	ldrb	r2, [r7, #3]
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f000 fbaa 	bl	8001468 <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <XL320_Update_CRC>:
}
void XL320_Set_Led_Color(__XL320_HandleTypeDef *XL320_Handle, uint16_t color){
	XL320_Write_Data(XL320_Handle, XL320_REG_LED, color);
}
void XL320_Set_ID(__XL320_HandleTypeDef *XL320_Handle, uint8_t); // Later
void XL320_Update_CRC(__XL320_HandleTypeDef *XL320_Handle){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t crc_accum = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	81bb      	strh	r3, [r7, #12]


	for(j = 0; j < XL320_Handle->tx_data_length; j++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	81fb      	strh	r3, [r7, #14]
 8000d2c:	e019      	b.n	8000d62 <XL320_Update_CRC+0x46>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ XL320_Handle->tx_buffer[j]) & 0xFF;
 8000d2e:	89bb      	ldrh	r3, [r7, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	89fa      	ldrh	r2, [r7, #14]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	440a      	add	r2, r1
 8000d3a:	f892 203c 	ldrb.w	r2, [r2, #60]	@ 0x3c
 8000d3e:	4053      	eors	r3, r2
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000d46:	89bb      	ldrh	r3, [r7, #12]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	897b      	ldrh	r3, [r7, #10]
 8000d4e:	490d      	ldr	r1, [pc, #52]	@ (8000d84 <XL320_Update_CRC+0x68>)
 8000d50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4053      	eors	r3, r2
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	81bb      	strh	r3, [r7, #12]
	for(j = 0; j < XL320_Handle->tx_data_length; j++)
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	81fb      	strh	r3, [r7, #14]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8000d68:	461a      	mov	r2, r3
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d3de      	bcc.n	8000d2e <XL320_Update_CRC+0x12>
	}

	XL320_Handle->crc = crc_accum;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	89ba      	ldrh	r2, [r7, #12]
 8000d74:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	08003d84 	.word	0x08003d84

08000d88 <XL320_Check_CRC>:

HAL_StatusTypeDef XL320_Check_CRC(__XL320_HandleTypeDef *XL320_Handle){
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	uint16_t i, j;
	uint16_t crc_accum = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	81bb      	strh	r3, [r7, #12]
	uint16_t crc_read = XL320_Handle->rx_buffer[XL320_Handle->rx_data_length+5] + (((uint16_t)XL320_Handle->rx_buffer[XL320_Handle->rx_data_length+6])<<8);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000d9a:	3305      	adds	r3, #5
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	4413      	add	r3, r2
 8000da0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8000da4:	4619      	mov	r1, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000dac:	3306      	adds	r3, #6
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	440b      	add	r3, r1
 8000dbc:	817b      	strh	r3, [r7, #10]

	for(j = 0; j < XL320_Handle->rx_data_length+5; j++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	81fb      	strh	r3, [r7, #14]
 8000dc2:	e019      	b.n	8000df8 <XL320_Check_CRC+0x70>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ XL320_Handle->rx_buffer[j]) & 0xFF;
 8000dc4:	89bb      	ldrh	r3, [r7, #12]
 8000dc6:	0a1b      	lsrs	r3, r3, #8
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	89fa      	ldrh	r2, [r7, #14]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	440a      	add	r2, r1
 8000dd0:	f892 207d 	ldrb.w	r2, [r2, #125]	@ 0x7d
 8000dd4:	4053      	eors	r3, r2
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	813b      	strh	r3, [r7, #8]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	893b      	ldrh	r3, [r7, #8]
 8000de4:	490e      	ldr	r1, [pc, #56]	@ (8000e20 <XL320_Check_CRC+0x98>)
 8000de6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	4053      	eors	r3, r2
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	81bb      	strh	r3, [r7, #12]
	for(j = 0; j < XL320_Handle->rx_data_length+5; j++)
 8000df2:	89fb      	ldrh	r3, [r7, #14]
 8000df4:	3301      	adds	r3, #1
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 8000dfe:	1d1a      	adds	r2, r3, #4
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dade      	bge.n	8000dc4 <XL320_Check_CRC+0x3c>
	}

	if(crc_accum == crc_read) return HAL_OK;
 8000e06:	89ba      	ldrh	r2, [r7, #12]
 8000e08:	897b      	ldrh	r3, [r7, #10]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d101      	bne.n	8000e12 <XL320_Check_CRC+0x8a>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <XL320_Check_CRC+0x8c>
	else return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	08003d84 	.word	0x08003d84

08000e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e24:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e26:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fd2c 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <LoopForever+0xe>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <LoopForever+0x16>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 fac9 	bl	80033e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e56:	f7ff fc03 	bl	8000660 <main>

08000e5a <LoopForever>:

LoopForever:
    b LoopForever
 8000e5a:	e7fe      	b.n	8000e5a <LoopForever>
  ldr   r0, =_estack
 8000e5c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e68:	0800404c 	.word	0x0800404c
  ldr r2, =_sbss
 8000e6c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e70:	200004b0 	.word	0x200004b0

08000e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC1_2_IRQHandler>

08000e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f93d 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 f80e 	bl	8000ea8 <HAL_InitTick>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	71fb      	strb	r3, [r7, #7]
 8000e96:	e001      	b.n	8000e9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e98:	f7ff fc6a 	bl	8000770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000eb4:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <HAL_InitTick+0x68>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d022      	beq.n	8000f02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ebc:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_InitTick+0x6c>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_InitTick+0x68>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ec8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f93a 	bl	800114a <HAL_SYSTICK_Config>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10f      	bne.n	8000efc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b0f      	cmp	r3, #15
 8000ee0:	d809      	bhi.n	8000ef6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eea:	f000 f914 	bl	8001116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <HAL_InitTick+0x70>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	e007      	b.n	8000f06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e004      	b.n	8000f06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e001      	b.n	8000f06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_IncTick+0x1c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a03      	ldr	r2, [pc, #12]	@ (8000f38 <HAL_IncTick+0x1c>)
 8000f2c:	6013      	str	r3, [r2, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000364 	.word	0x20000364
 8000f3c:	20000008 	.word	0x20000008

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000364 	.word	0x20000364

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f70:	d004      	beq.n	8000f7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <HAL_Delay+0x40>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7c:	bf00      	nop
 8000f7e:	f7ff ffdf 	bl	8000f40 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d8f7      	bhi.n	8000f7e <HAL_Delay+0x26>
  {
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000008 	.word	0x20000008

08000f9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fce:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	60d3      	str	r3, [r2, #12]
}
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <__NVIC_GetPriorityGrouping+0x18>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	f003 0307 	and.w	r3, r3, #7
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	@ (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	@ (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	@ 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff47 	bl	8000f9c <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff5e 	bl	8000fe4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff ffb2 	bl	80010bc <SysTick_Config>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001172:	e15a      	b.n	800142a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	2101      	movs	r1, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 814c 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b01      	cmp	r3, #1
 8001196:	d005      	beq.n	80011a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d130      	bne.n	8001206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011da:	2201      	movs	r2, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	f003 0201 	and.w	r2, r3, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0303 	and.w	r3, r3, #3
 800120e:	2b03      	cmp	r3, #3
 8001210:	d017      	beq.n	8001242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	2203      	movs	r2, #3
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d123      	bne.n	8001296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0203 	and.w	r2, r3, #3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012dc:	4a5a      	ldr	r2, [pc, #360]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e4:	4b58      	ldr	r3, [pc, #352]	@ (8001448 <HAL_GPIO_Init+0x2e4>)
 80012e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f0:	4a56      	ldr	r2, [pc, #344]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4013      	ands	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800131a:	d01f      	beq.n	800135c <HAL_GPIO_Init+0x1f8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4c      	ldr	r2, [pc, #304]	@ (8001450 <HAL_GPIO_Init+0x2ec>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d019      	beq.n	8001358 <HAL_GPIO_Init+0x1f4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4b      	ldr	r2, [pc, #300]	@ (8001454 <HAL_GPIO_Init+0x2f0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d013      	beq.n	8001354 <HAL_GPIO_Init+0x1f0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_GPIO_Init+0x2f4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d00d      	beq.n	8001350 <HAL_GPIO_Init+0x1ec>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a49      	ldr	r2, [pc, #292]	@ (800145c <HAL_GPIO_Init+0x2f8>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d007      	beq.n	800134c <HAL_GPIO_Init+0x1e8>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a48      	ldr	r2, [pc, #288]	@ (8001460 <HAL_GPIO_Init+0x2fc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_GPIO_Init+0x1e4>
 8001344:	2305      	movs	r3, #5
 8001346:	e00a      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001348:	2306      	movs	r3, #6
 800134a:	e008      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800134c:	2304      	movs	r3, #4
 800134e:	e006      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001350:	2303      	movs	r3, #3
 8001352:	e004      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001354:	2302      	movs	r3, #2
 8001356:	e002      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <HAL_GPIO_Init+0x1fa>
 800135c:	2300      	movs	r3, #0
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	f002 0203 	and.w	r2, r2, #3
 8001364:	0092      	lsls	r2, r2, #2
 8001366:	4093      	lsls	r3, r2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136e:	4937      	ldr	r1, [pc, #220]	@ (800144c <HAL_GPIO_Init+0x2e8>)
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	089b      	lsrs	r3, r3, #2
 8001374:	3302      	adds	r3, #2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_GPIO_Init+0x300>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a30      	ldr	r2, [pc, #192]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <HAL_GPIO_Init+0x300>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141e:	4a11      	ldr	r2, [pc, #68]	@ (8001464 <HAL_GPIO_Init+0x300>)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	f47f ae9d 	bne.w	8001174 <HAL_GPIO_Init+0x10>
  }
}
 800143a:	bf00      	nop
 800143c:	bf00      	nop
 800143e:	371c      	adds	r7, #28
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	48000400 	.word	0x48000400
 8001454:	48000800 	.word	0x48000800
 8001458:	48000c00 	.word	0x48000c00
 800145c:	48001000 	.word	0x48001000
 8001460:	48001400 	.word	0x48001400
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d141      	bne.n	800152a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b4b      	ldr	r3, [pc, #300]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014b2:	d131      	bne.n	8001518 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014b4:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ba:	4a46      	ldr	r2, [pc, #280]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	4b43      	ldr	r3, [pc, #268]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014cc:	4a41      	ldr	r2, [pc, #260]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014d4:	4b40      	ldr	r3, [pc, #256]	@ (80015d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2232      	movs	r2, #50	@ 0x32
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	4a3f      	ldr	r2, [pc, #252]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	0c9b      	lsrs	r3, r3, #18
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014ea:	e002      	b.n	80014f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014f2:	4b38      	ldr	r3, [pc, #224]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014fe:	d102      	bne.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f2      	bne.n	80014ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001506:	4b33      	ldr	r3, [pc, #204]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001512:	d158      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e057      	b.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001518:	4b2e      	ldr	r3, [pc, #184]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800151e:	4a2d      	ldr	r2, [pc, #180]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001524:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001528:	e04d      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001530:	d141      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001532:	4b28      	ldr	r3, [pc, #160]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800153a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800153e:	d131      	bne.n	80015a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001540:	4b24      	ldr	r3, [pc, #144]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001546:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001558:	4a1e      	ldr	r2, [pc, #120]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001560:	4b1d      	ldr	r3, [pc, #116]	@ (80015d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2232      	movs	r2, #50	@ 0x32
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	4a1c      	ldr	r2, [pc, #112]	@ (80015dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800156c:	fba2 2303 	umull	r2, r3, r2, r3
 8001570:	0c9b      	lsrs	r3, r3, #18
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001576:	e002      	b.n	800157e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3b01      	subs	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800158a:	d102      	bne.n	8001592 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f2      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159e:	d112      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e011      	b.n	80015c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015aa:	4a0a      	ldr	r2, [pc, #40]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015b4:	e007      	b.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	40007000 	.word	0x40007000
 80015d8:	20000000 	.word	0x20000000
 80015dc:	431bde83 	.word	0x431bde83

080015e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80015ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ee:	6093      	str	r3, [r2, #8]
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000

08001600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e2fe      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d075      	beq.n	800170a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161e:	4b97      	ldr	r3, [pc, #604]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001628:	4b94      	ldr	r3, [pc, #592]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	2b0c      	cmp	r3, #12
 8001636:	d102      	bne.n	800163e <HAL_RCC_OscConfig+0x3e>
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d002      	beq.n	8001644 <HAL_RCC_OscConfig+0x44>
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d10b      	bne.n	800165c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b8d      	ldr	r3, [pc, #564]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d05b      	beq.n	8001708 <HAL_RCC_OscConfig+0x108>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d157      	bne.n	8001708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e2d9      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001664:	d106      	bne.n	8001674 <HAL_RCC_OscConfig+0x74>
 8001666:	4b85      	ldr	r3, [pc, #532]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a84      	ldr	r2, [pc, #528]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e01d      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x98>
 800167e:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a7e      	ldr	r2, [pc, #504]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b7c      	ldr	r3, [pc, #496]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7b      	ldr	r2, [pc, #492]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e00b      	b.n	80016b0 <HAL_RCC_OscConfig+0xb0>
 8001698:	4b78      	ldr	r3, [pc, #480]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a77      	ldr	r2, [pc, #476]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800169e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b75      	ldr	r3, [pc, #468]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a74      	ldr	r2, [pc, #464]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80016aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d013      	beq.n	80016e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc42 	bl	8000f40 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c0:	f7ff fc3e 	bl	8000f40 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b64      	cmp	r3, #100	@ 0x64
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e29e      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	4b6a      	ldr	r3, [pc, #424]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0xc0>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fc2e 	bl	8000f40 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fc2a 	bl	8000f40 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	@ 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e28a      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016fa:	4b60      	ldr	r3, [pc, #384]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0xe8>
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d075      	beq.n	8001802 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001716:	4b59      	ldr	r3, [pc, #356]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001720:	4b56      	ldr	r3, [pc, #344]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b0c      	cmp	r3, #12
 800172e:	d102      	bne.n	8001736 <HAL_RCC_OscConfig+0x136>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d002      	beq.n	800173c <HAL_RCC_OscConfig+0x13c>
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	2b04      	cmp	r3, #4
 800173a:	d11f      	bne.n	800177c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800173c:	4b4f      	ldr	r3, [pc, #316]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x154>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e25d      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001754:	4b49      	ldr	r3, [pc, #292]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	4946      	ldr	r1, [pc, #280]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001768:	4b45      	ldr	r3, [pc, #276]	@ (8001880 <HAL_RCC_OscConfig+0x280>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fb9b 	bl	8000ea8 <HAL_InitTick>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d043      	beq.n	8001800 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e249      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d023      	beq.n	80017cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b3d      	ldr	r3, [pc, #244]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a3c      	ldr	r2, [pc, #240]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fbd6 	bl	8000f40 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fbd2 	bl	8000f40 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e232      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017aa:	4b34      	ldr	r3, [pc, #208]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b6:	4b31      	ldr	r3, [pc, #196]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	061b      	lsls	r3, r3, #24
 80017c4:	492d      	ldr	r1, [pc, #180]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	604b      	str	r3, [r1, #4]
 80017ca:	e01a      	b.n	8001802 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2a      	ldr	r2, [pc, #168]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80017d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff fbb2 	bl	8000f40 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fbae 	bl	8000f40 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e20e      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f2:	4b22      	ldr	r3, [pc, #136]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f0      	bne.n	80017e0 <HAL_RCC_OscConfig+0x1e0>
 80017fe:	e000      	b.n	8001802 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d041      	beq.n	8001892 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d01c      	beq.n	8001850 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001818:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800181c:	4a17      	ldr	r2, [pc, #92]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001826:	f7ff fb8b 	bl	8000f40 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff fb87 	bl	8000f40 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1e7      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001842:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0ef      	beq.n	800182e <HAL_RCC_OscConfig+0x22e>
 800184e:	e020      	b.n	8001892 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001856:	4a09      	ldr	r2, [pc, #36]	@ (800187c <HAL_RCC_OscConfig+0x27c>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fb6e 	bl	8000f40 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001866:	e00d      	b.n	8001884 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fb6a 	bl	8000f40 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d906      	bls.n	8001884 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e1ca      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001884:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1ea      	bne.n	8001868 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	2b00      	cmp	r3, #0
 800189c:	f000 80a6 	beq.w	80019ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018a4:	4b84      	ldr	r3, [pc, #528]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2b4>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x2b6>
 80018b4:	2300      	movs	r3, #0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00d      	beq.n	80018d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ba:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018be:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80018c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018d2:	2301      	movs	r3, #1
 80018d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d6:	4b79      	ldr	r3, [pc, #484]	@ (8001abc <HAL_RCC_OscConfig+0x4bc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d118      	bne.n	8001914 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e2:	4b76      	ldr	r3, [pc, #472]	@ (8001abc <HAL_RCC_OscConfig+0x4bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	@ (8001abc <HAL_RCC_OscConfig+0x4bc>)
 80018e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ee:	f7ff fb27 	bl	8000f40 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f6:	f7ff fb23 	bl	8000f40 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e183      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001908:	4b6c      	ldr	r3, [pc, #432]	@ (8001abc <HAL_RCC_OscConfig+0x4bc>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d108      	bne.n	800192e <HAL_RCC_OscConfig+0x32e>
 800191c:	4b66      	ldr	r3, [pc, #408]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 800191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001922:	4a65      	ldr	r2, [pc, #404]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800192c:	e024      	b.n	8001978 <HAL_RCC_OscConfig+0x378>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d110      	bne.n	8001958 <HAL_RCC_OscConfig+0x358>
 8001936:	4b60      	ldr	r3, [pc, #384]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001946:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800194c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001956:	e00f      	b.n	8001978 <HAL_RCC_OscConfig+0x378>
 8001958:	4b57      	ldr	r3, [pc, #348]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 800195a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195e:	4a56      	ldr	r2, [pc, #344]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001968:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 800196a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196e:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d016      	beq.n	80019ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff fade 	bl	8000f40 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff fada 	bl	8000f40 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e138      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800199e:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0ed      	beq.n	8001988 <HAL_RCC_OscConfig+0x388>
 80019ac:	e015      	b.n	80019da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ae:	f7ff fac7 	bl	8000f40 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b4:	e00a      	b.n	80019cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff fac3 	bl	8000f40 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e121      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019cc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80019ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ed      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019da:	7ffb      	ldrb	r3, [r7, #31]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	4a34      	ldr	r2, [pc, #208]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 80019e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0320 	and.w	r3, r3, #32
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d03c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d01c      	beq.n	8001a3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a06:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a10:	f7ff fa96 	bl	8000f40 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a18:	f7ff fa92 	bl	8000f40 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e0f2      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a2a:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ef      	beq.n	8001a18 <HAL_RCC_OscConfig+0x418>
 8001a38:	e01b      	b.n	8001a72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a40:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa79 	bl	8000f40 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a52:	f7ff fa75 	bl	8000f40 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e0d5      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ef      	bne.n	8001a52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 80c9 	beq.w	8001c0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b0c      	cmp	r3, #12
 8001a86:	f000 8083 	beq.w	8001b90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d15e      	bne.n	8001b50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b09      	ldr	r3, [pc, #36]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <HAL_RCC_OscConfig+0x4b8>)
 8001a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa4f 	bl	8000f40 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	e00c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa6:	f7ff fa4b 	bl	8000f40 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d905      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e0ab      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	4b55      	ldr	r3, [pc, #340]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1ec      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001acc:	4b52      	ldr	r3, [pc, #328]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	4b52      	ldr	r3, [pc, #328]	@ (8001c1c <HAL_RCC_OscConfig+0x61c>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6a11      	ldr	r1, [r2, #32]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001adc:	3a01      	subs	r2, #1
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001ae6:	0212      	lsls	r2, r2, #8
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001aee:	0852      	lsrs	r2, r2, #1
 8001af0:	3a01      	subs	r2, #1
 8001af2:	0552      	lsls	r2, r2, #21
 8001af4:	4311      	orrs	r1, r2
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001afa:	0852      	lsrs	r2, r2, #1
 8001afc:	3a01      	subs	r2, #1
 8001afe:	0652      	lsls	r2, r2, #25
 8001b00:	4311      	orrs	r1, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b06:	06d2      	lsls	r2, r2, #27
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	4943      	ldr	r1, [pc, #268]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b10:	4b41      	ldr	r3, [pc, #260]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a40      	ldr	r2, [pc, #256]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4a3d      	ldr	r2, [pc, #244]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff fa0a 	bl	8000f40 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff fa06 	bl	8000f40 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e066      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x530>
 8001b4e:	e05e      	b.n	8001c0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a30      	ldr	r2, [pc, #192]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f9f0 	bl	8000f40 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f9ec 	bl	8000f40 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04c      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b76:	4b28      	ldr	r3, [pc, #160]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4924      	ldr	r1, [pc, #144]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	60cb      	str	r3, [r1, #12]
 8001b8e:	e03e      	b.n	8001c0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e039      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c18 <HAL_RCC_OscConfig+0x618>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d12c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d123      	bne.n	8001c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d11b      	bne.n	8001c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bdc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d113      	bne.n	8001c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	019f800c 	.word	0x019f800c
 8001c20:	feeefffc 	.word	0xfeeefffc

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e11e      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b91      	ldr	r3, [pc, #580]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	498c      	ldr	r1, [pc, #560]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e106      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d073      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d129      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c80:	4b81      	ldr	r3, [pc, #516]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0f4      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001c90:	f000 f99e 	bl	8001fd0 <RCC_GetSysClockFreqFromPLLSource>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4a7c      	ldr	r2, [pc, #496]	@ (8001e8c <HAL_RCC_ClockConfig+0x268>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d93f      	bls.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001c9e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d009      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d033      	beq.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d12f      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001cbe:	4b72      	ldr	r3, [pc, #456]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001cc6:	4a70      	ldr	r2, [pc, #448]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ccc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e024      	b.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0c6      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cec:	4b66      	ldr	r3, [pc, #408]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0be      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001cfc:	f000 f8ce 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4a61      	ldr	r2, [pc, #388]	@ (8001e8c <HAL_RCC_ClockConfig+0x268>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d909      	bls.n	8001d1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001d12:	4a5d      	ldr	r2, [pc, #372]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001d1a:	2380      	movs	r3, #128	@ 0x80
 8001d1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f023 0203 	bic.w	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4957      	ldr	r1, [pc, #348]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d30:	f7ff f906 	bl	8000f40 <HAL_GetTick>
 8001d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d38:	f7ff f902 	bl	8000f40 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e095      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 020c 	and.w	r2, r3, #12
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d1eb      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d78:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a42      	ldr	r2, [pc, #264]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001d90:	4b3d      	ldr	r3, [pc, #244]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001d98:	4a3b      	ldr	r2, [pc, #236]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001d9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da0:	4b39      	ldr	r3, [pc, #228]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4936      	ldr	r1, [pc, #216]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	608b      	str	r3, [r1, #8]
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b80      	cmp	r3, #128	@ 0x80
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001dba:	4b33      	ldr	r3, [pc, #204]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4a32      	ldr	r2, [pc, #200]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d21d      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 020f 	bic.w	r2, r3, #15
 8001ddc:	4929      	ldr	r1, [pc, #164]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001de4:	f7ff f8ac 	bl	8000f40 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff f8a8 	bl	8000f40 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e03b      	b.n	8001e7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d1ed      	bne.n	8001dec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4917      	ldr	r1, [pc, #92]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b13      	ldr	r3, [pc, #76]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490f      	ldr	r1, [pc, #60]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e4e:	f000 f825 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_RCC_ClockConfig+0x264>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490c      	ldr	r1, [pc, #48]	@ (8001e90 <HAL_RCC_ClockConfig+0x26c>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <HAL_RCC_ClockConfig+0x270>)
 8001e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_RCC_ClockConfig+0x274>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f818 	bl	8000ea8 <HAL_InitTick>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	04c4b400 	.word	0x04c4b400
 8001e90:	08003d6c 	.word	0x08003d6c
 8001e94:	20000000 	.word	0x20000000
 8001e98:	20000004 	.word	0x20000004

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e047      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001eb4:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b08      	cmp	r3, #8
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e03e      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001ec6:	4b23      	ldr	r3, [pc, #140]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b0c      	cmp	r3, #12
 8001ed0:	d136      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef8:	4a16      	ldr	r2, [pc, #88]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001efa:	68d2      	ldr	r2, [r2, #12]
 8001efc:	0a12      	lsrs	r2, r2, #8
 8001efe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	617b      	str	r3, [r7, #20]
      break;
 8001f08:	e00c      	b.n	8001f24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4a10      	ldr	r2, [pc, #64]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f14:	68d2      	ldr	r2, [r2, #12]
 8001f16:	0a12      	lsrs	r2, r2, #8
 8001f18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001f1c:	fb02 f303 	mul.w	r3, r2, r3
 8001f20:	617b      	str	r3, [r7, #20]
      break;
 8001f22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0e5b      	lsrs	r3, r3, #25
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	e001      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f44:	693b      	ldr	r3, [r7, #16]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	00f42400 	.word	0x00f42400
 8001f5c:	007a1200 	.word	0x007a1200

08001f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000000 	.word	0x20000000

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a1b      	lsrs	r3, r3, #8
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4904      	ldr	r1, [pc, #16]	@ (8001fa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	f003 031f 	and.w	r3, r3, #31
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08003d7c 	.word	0x08003d7c

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fa8:	f7ff ffda 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0adb      	lsrs	r3, r3, #11
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	f003 031f 	and.w	r3, r3, #31
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	08003d7c 	.word	0x08003d7c

08001fd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3301      	adds	r3, #1
 8001fec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d10c      	bne.n	800200e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ffe:	68d2      	ldr	r2, [r2, #12]
 8002000:	0a12      	lsrs	r2, r2, #8
 8002002:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
    break;
 800200c:	e00c      	b.n	8002028 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	fbb2 f3f3 	udiv	r3, r2, r3
 8002016:	4a0e      	ldr	r2, [pc, #56]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002018:	68d2      	ldr	r2, [r2, #12]
 800201a:	0a12      	lsrs	r2, r2, #8
 800201c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    break;
 8002026:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0e5b      	lsrs	r3, r3, #25
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	3301      	adds	r3, #1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	007a1200 	.word	0x007a1200
 8002058:	00f42400 	.word	0x00f42400

0800205c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002064:	2300      	movs	r3, #0
 8002066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002068:	2300      	movs	r3, #0
 800206a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8098 	beq.w	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207a:	2300      	movs	r3, #0
 800207c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207e:	4b43      	ldr	r3, [pc, #268]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208a:	4b40      	ldr	r3, [pc, #256]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	4a3f      	ldr	r2, [pc, #252]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002094:	6593      	str	r3, [r2, #88]	@ 0x58
 8002096:	4b3d      	ldr	r3, [pc, #244]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a2:	2301      	movs	r3, #1
 80020a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b2:	f7fe ff45 	bl	8000f40 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020b8:	e009      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe ff41 	bl	8000f40 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d902      	bls.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	74fb      	strb	r3, [r7, #19]
        break;
 80020cc:	e005      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020ce:	4b30      	ldr	r3, [pc, #192]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0ef      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d159      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d01e      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fc:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002106:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002108:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210e:	4a1f      	ldr	r2, [pc, #124]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002118:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211e:	4a1b      	ldr	r2, [pc, #108]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002128:	4a18      	ldr	r2, [pc, #96]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d016      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213a:	f7fe ff01 	bl	8000f40 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002140:	e00b      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe fefd 	bl	8000f40 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d902      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	74fb      	strb	r3, [r7, #19]
            break;
 8002158:	e006      	b.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0ec      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002168:	7cfb      	ldrb	r3, [r7, #19]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216e:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	4903      	ldr	r1, [pc, #12]	@ (800218c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002184:	e008      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002186:	7cfb      	ldrb	r3, [r7, #19]
 8002188:	74bb      	strb	r3, [r7, #18]
 800218a:	e005      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	7cfb      	ldrb	r3, [r7, #19]
 8002196:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002198:	7c7b      	ldrb	r3, [r7, #17]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d105      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800219e:	4ba6      	ldr	r3, [pc, #664]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a2:	4aa5      	ldr	r2, [pc, #660]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021b6:	4ba0      	ldr	r3, [pc, #640]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021bc:	f023 0203 	bic.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	499c      	ldr	r1, [pc, #624]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021d8:	4b97      	ldr	r3, [pc, #604]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	f023 020c 	bic.w	r2, r3, #12
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4994      	ldr	r1, [pc, #592]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021fa:	4b8f      	ldr	r3, [pc, #572]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002200:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	498b      	ldr	r1, [pc, #556]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800221c:	4b86      	ldr	r3, [pc, #536]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4983      	ldr	r1, [pc, #524]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800223e:	4b7e      	ldr	r3, [pc, #504]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	497a      	ldr	r1, [pc, #488]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002260:	4b75      	ldr	r3, [pc, #468]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002266:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	4972      	ldr	r1, [pc, #456]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002282:	4b6d      	ldr	r3, [pc, #436]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002288:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4969      	ldr	r1, [pc, #420]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00a      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a4:	4b64      	ldr	r3, [pc, #400]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4961      	ldr	r1, [pc, #388]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	4958      	ldr	r1, [pc, #352]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e8:	4b53      	ldr	r3, [pc, #332]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f6:	4950      	ldr	r1, [pc, #320]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002306:	d105      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b4b      	ldr	r3, [pc, #300]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a4a      	ldr	r2, [pc, #296]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002320:	4b45      	ldr	r3, [pc, #276]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002326:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232e:	4942      	ldr	r1, [pc, #264]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800233e:	d105      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002340:	4b3d      	ldr	r3, [pc, #244]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a3c      	ldr	r2, [pc, #240]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002346:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800234a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002358:	4b37      	ldr	r3, [pc, #220]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	4934      	ldr	r1, [pc, #208]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002378:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a2e      	ldr	r2, [pc, #184]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002382:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002396:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239e:	4926      	ldr	r1, [pc, #152]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023ae:	d105      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a20      	ldr	r2, [pc, #128]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d015      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023d6:	4918      	ldr	r1, [pc, #96]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e6:	d105      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a12      	ldr	r2, [pc, #72]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002400:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002406:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240e:	490a      	ldr	r1, [pc, #40]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800241e:	d105      	bne.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002420:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a04      	ldr	r2, [pc, #16]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800242a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800242c:	7cbb      	ldrb	r3, [r7, #18]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000

0800243c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e042      	b.n	80024d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002454:	2b00      	cmp	r3, #0
 8002456:	d106      	bne.n	8002466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7fe fabb 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2224      	movs	r2, #36	@ 0x24
 800246a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0201 	bic.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d002      	beq.n	800248c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fc4a 	bl	8002d20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f97b 	bl	8002788 <UART_SetConfig>
 8002492:	4603      	mov	r3, r0
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e01b      	b.n	80024d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fcc9 	bl	8002e64 <UART_CheckIdleState>
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af02      	add	r7, sp, #8
 80024e2:	60f8      	str	r0, [r7, #12]
 80024e4:	60b9      	str	r1, [r7, #8]
 80024e6:	603b      	str	r3, [r7, #0]
 80024e8:	4613      	mov	r3, r2
 80024ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d17b      	bne.n	80025ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_UART_Transmit+0x26>
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e074      	b.n	80025f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2221      	movs	r2, #33	@ 0x21
 8002512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002516:	f7fe fd13 	bl	8000f40 <HAL_GetTick>
 800251a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	88fa      	ldrh	r2, [r7, #6]
 8002520:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002534:	d108      	bne.n	8002548 <HAL_UART_Transmit+0x6c>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	61bb      	str	r3, [r7, #24]
 8002546:	e003      	b.n	8002550 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002550:	e030      	b.n	80025b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2200      	movs	r2, #0
 800255a:	2180      	movs	r1, #128	@ 0x80
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fd2b 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e03d      	b.n	80025f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	461a      	mov	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002588:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	3302      	adds	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
 8002590:	e007      	b.n	80025a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	3301      	adds	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1c8      	bne.n	8002552 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2200      	movs	r2, #0
 80025c8:	2140      	movs	r1, #64	@ 0x40
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 fcf4 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e006      	b.n	80025f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3720      	adds	r7, #32
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800260e:	2b20      	cmp	r3, #32
 8002610:	f040 80b5 	bne.w	800277e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <HAL_UART_Receive+0x28>
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0ad      	b.n	8002780 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2222      	movs	r2, #34	@ 0x22
 8002630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800263a:	f7fe fc81 	bl	8000f40 <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	88fa      	ldrh	r2, [r7, #6]
 800264c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002658:	d10e      	bne.n	8002678 <HAL_UART_Receive+0x80>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_UART_Receive+0x76>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002668:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800266c:	e02d      	b.n	80026ca <HAL_UART_Receive+0xd2>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	22ff      	movs	r2, #255	@ 0xff
 8002672:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002676:	e028      	b.n	80026ca <HAL_UART_Receive+0xd2>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_UART_Receive+0xa4>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d104      	bne.n	8002692 <HAL_UART_Receive+0x9a>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	22ff      	movs	r2, #255	@ 0xff
 800268c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8002690:	e01b      	b.n	80026ca <HAL_UART_Receive+0xd2>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	227f      	movs	r2, #127	@ 0x7f
 8002696:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800269a:	e016      	b.n	80026ca <HAL_UART_Receive+0xd2>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026a4:	d10d      	bne.n	80026c2 <HAL_UART_Receive+0xca>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d104      	bne.n	80026b8 <HAL_UART_Receive+0xc0>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	227f      	movs	r2, #127	@ 0x7f
 80026b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80026b6:	e008      	b.n	80026ca <HAL_UART_Receive+0xd2>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	223f      	movs	r2, #63	@ 0x3f
 80026bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80026c0:	e003      	b.n	80026ca <HAL_UART_Receive+0xd2>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80026d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026da:	d108      	bne.n	80026ee <HAL_UART_Receive+0xf6>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d104      	bne.n	80026ee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
 80026ec:	e003      	b.n	80026f6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026f6:	e036      	b.n	8002766 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2200      	movs	r2, #0
 8002700:	2120      	movs	r1, #32
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fc58 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2220      	movs	r2, #32
 8002712:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e032      	b.n	8002780 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10c      	bne.n	800273a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002726:	b29a      	uxth	r2, r3
 8002728:	8a7b      	ldrh	r3, [r7, #18]
 800272a:	4013      	ands	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	3302      	adds	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
 8002738:	e00c      	b.n	8002754 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	b2da      	uxtb	r2, r3
 8002742:	8a7b      	ldrh	r3, [r7, #18]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	4013      	ands	r3, r2
 8002748:	b2da      	uxtb	r2, r3
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3301      	adds	r3, #1
 8002752:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1c2      	bne.n	80026f8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3720      	adds	r7, #32
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800278c:	b08c      	sub	sp, #48	@ 0x30
 800278e:	af00      	add	r7, sp, #0
 8002790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4bab      	ldr	r3, [pc, #684]	@ (8002a64 <UART_SetConfig+0x2dc>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4aa0      	ldr	r2, [pc, #640]	@ (8002a68 <UART_SetConfig+0x2e0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d004      	beq.n	80027f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027f0:	4313      	orrs	r3, r2
 80027f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80027fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002812:	f023 010f 	bic.w	r1, r3, #15
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a91      	ldr	r2, [pc, #580]	@ (8002a6c <UART_SetConfig+0x2e4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d125      	bne.n	8002878 <UART_SetConfig+0xf0>
 800282c:	4b90      	ldr	r3, [pc, #576]	@ (8002a70 <UART_SetConfig+0x2e8>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b03      	cmp	r3, #3
 8002838:	d81a      	bhi.n	8002870 <UART_SetConfig+0xe8>
 800283a:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <UART_SetConfig+0xb8>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002851 	.word	0x08002851
 8002844:	08002861 	.word	0x08002861
 8002848:	08002859 	.word	0x08002859
 800284c:	08002869 	.word	0x08002869
 8002850:	2301      	movs	r3, #1
 8002852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002856:	e0d6      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002858:	2302      	movs	r3, #2
 800285a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800285e:	e0d2      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002860:	2304      	movs	r3, #4
 8002862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002866:	e0ce      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002868:	2308      	movs	r3, #8
 800286a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800286e:	e0ca      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002870:	2310      	movs	r3, #16
 8002872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002876:	e0c6      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a7d      	ldr	r2, [pc, #500]	@ (8002a74 <UART_SetConfig+0x2ec>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d138      	bne.n	80028f4 <UART_SetConfig+0x16c>
 8002882:	4b7b      	ldr	r3, [pc, #492]	@ (8002a70 <UART_SetConfig+0x2e8>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002888:	f003 030c 	and.w	r3, r3, #12
 800288c:	2b0c      	cmp	r3, #12
 800288e:	d82d      	bhi.n	80028ec <UART_SetConfig+0x164>
 8002890:	a201      	add	r2, pc, #4	@ (adr r2, 8002898 <UART_SetConfig+0x110>)
 8002892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002896:	bf00      	nop
 8002898:	080028cd 	.word	0x080028cd
 800289c:	080028ed 	.word	0x080028ed
 80028a0:	080028ed 	.word	0x080028ed
 80028a4:	080028ed 	.word	0x080028ed
 80028a8:	080028dd 	.word	0x080028dd
 80028ac:	080028ed 	.word	0x080028ed
 80028b0:	080028ed 	.word	0x080028ed
 80028b4:	080028ed 	.word	0x080028ed
 80028b8:	080028d5 	.word	0x080028d5
 80028bc:	080028ed 	.word	0x080028ed
 80028c0:	080028ed 	.word	0x080028ed
 80028c4:	080028ed 	.word	0x080028ed
 80028c8:	080028e5 	.word	0x080028e5
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028d2:	e098      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028d4:	2302      	movs	r3, #2
 80028d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028da:	e094      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028dc:	2304      	movs	r3, #4
 80028de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028e2:	e090      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028e4:	2308      	movs	r3, #8
 80028e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028ea:	e08c      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028ec:	2310      	movs	r3, #16
 80028ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80028f2:	e088      	b.n	8002a06 <UART_SetConfig+0x27e>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002a78 <UART_SetConfig+0x2f0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d125      	bne.n	800294a <UART_SetConfig+0x1c2>
 80028fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002a70 <UART_SetConfig+0x2e8>)
 8002900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002904:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002908:	2b30      	cmp	r3, #48	@ 0x30
 800290a:	d016      	beq.n	800293a <UART_SetConfig+0x1b2>
 800290c:	2b30      	cmp	r3, #48	@ 0x30
 800290e:	d818      	bhi.n	8002942 <UART_SetConfig+0x1ba>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d00a      	beq.n	800292a <UART_SetConfig+0x1a2>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d814      	bhi.n	8002942 <UART_SetConfig+0x1ba>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <UART_SetConfig+0x19a>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d008      	beq.n	8002932 <UART_SetConfig+0x1aa>
 8002920:	e00f      	b.n	8002942 <UART_SetConfig+0x1ba>
 8002922:	2300      	movs	r3, #0
 8002924:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002928:	e06d      	b.n	8002a06 <UART_SetConfig+0x27e>
 800292a:	2302      	movs	r3, #2
 800292c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002930:	e069      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002932:	2304      	movs	r3, #4
 8002934:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002938:	e065      	b.n	8002a06 <UART_SetConfig+0x27e>
 800293a:	2308      	movs	r3, #8
 800293c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002940:	e061      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002942:	2310      	movs	r3, #16
 8002944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002948:	e05d      	b.n	8002a06 <UART_SetConfig+0x27e>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a7c <UART_SetConfig+0x2f4>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d125      	bne.n	80029a0 <UART_SetConfig+0x218>
 8002954:	4b46      	ldr	r3, [pc, #280]	@ (8002a70 <UART_SetConfig+0x2e8>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800295e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002960:	d016      	beq.n	8002990 <UART_SetConfig+0x208>
 8002962:	2bc0      	cmp	r3, #192	@ 0xc0
 8002964:	d818      	bhi.n	8002998 <UART_SetConfig+0x210>
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d00a      	beq.n	8002980 <UART_SetConfig+0x1f8>
 800296a:	2b80      	cmp	r3, #128	@ 0x80
 800296c:	d814      	bhi.n	8002998 <UART_SetConfig+0x210>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <UART_SetConfig+0x1f0>
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d008      	beq.n	8002988 <UART_SetConfig+0x200>
 8002976:	e00f      	b.n	8002998 <UART_SetConfig+0x210>
 8002978:	2300      	movs	r3, #0
 800297a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800297e:	e042      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002980:	2302      	movs	r3, #2
 8002982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002986:	e03e      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002988:	2304      	movs	r3, #4
 800298a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800298e:	e03a      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002990:	2308      	movs	r3, #8
 8002992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002996:	e036      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002998:	2310      	movs	r3, #16
 800299a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800299e:	e032      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a30      	ldr	r2, [pc, #192]	@ (8002a68 <UART_SetConfig+0x2e0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12a      	bne.n	8002a00 <UART_SetConfig+0x278>
 80029aa:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <UART_SetConfig+0x2e8>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029b8:	d01a      	beq.n	80029f0 <UART_SetConfig+0x268>
 80029ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029be:	d81b      	bhi.n	80029f8 <UART_SetConfig+0x270>
 80029c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029c4:	d00c      	beq.n	80029e0 <UART_SetConfig+0x258>
 80029c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ca:	d815      	bhi.n	80029f8 <UART_SetConfig+0x270>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <UART_SetConfig+0x250>
 80029d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d4:	d008      	beq.n	80029e8 <UART_SetConfig+0x260>
 80029d6:	e00f      	b.n	80029f8 <UART_SetConfig+0x270>
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029de:	e012      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029e0:	2302      	movs	r3, #2
 80029e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029e6:	e00e      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029e8:	2304      	movs	r3, #4
 80029ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029ee:	e00a      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029f0:	2308      	movs	r3, #8
 80029f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029f6:	e006      	b.n	8002a06 <UART_SetConfig+0x27e>
 80029f8:	2310      	movs	r3, #16
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80029fe:	e002      	b.n	8002a06 <UART_SetConfig+0x27e>
 8002a00:	2310      	movs	r3, #16
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <UART_SetConfig+0x2e0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	f040 80a8 	bne.w	8002b62 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d834      	bhi.n	8002a84 <UART_SetConfig+0x2fc>
 8002a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <UART_SetConfig+0x298>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a45 	.word	0x08002a45
 8002a24:	08002a85 	.word	0x08002a85
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002a85 	.word	0x08002a85
 8002a30:	08002a53 	.word	0x08002a53
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a85 	.word	0x08002a85
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a5b 	.word	0x08002a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a44:	f7ff fa98 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a4a:	e021      	b.n	8002a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <UART_SetConfig+0x2f8>)
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a50:	e01e      	b.n	8002a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a52:	f7ff fa23 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002a56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002a58:	e01a      	b.n	8002a90 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002a60:	e016      	b.n	8002a90 <UART_SetConfig+0x308>
 8002a62:	bf00      	nop
 8002a64:	cfff69f3 	.word	0xcfff69f3
 8002a68:	40008000 	.word	0x40008000
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40004400 	.word	0x40004400
 8002a78:	40004800 	.word	0x40004800
 8002a7c:	40004c00 	.word	0x40004c00
 8002a80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002a8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 812a 	beq.w	8002cec <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	4a9e      	ldr	r2, [pc, #632]	@ (8002d18 <UART_SetConfig+0x590>)
 8002a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d305      	bcc.n	8002ac8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d903      	bls.n	8002ad0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ace:	e10d      	b.n	8002cec <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	60fa      	str	r2, [r7, #12]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	4a8e      	ldr	r2, [pc, #568]	@ (8002d18 <UART_SetConfig+0x590>)
 8002ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	607a      	str	r2, [r7, #4]
 8002aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af2:	f7fd fbe5 	bl	80002c0 <__aeabi_uldivmod>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	020b      	lsls	r3, r1, #8
 8002b08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002b0c:	0202      	lsls	r2, r0, #8
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	6849      	ldr	r1, [r1, #4]
 8002b12:	0849      	lsrs	r1, r1, #1
 8002b14:	2000      	movs	r0, #0
 8002b16:	460c      	mov	r4, r1
 8002b18:	4605      	mov	r5, r0
 8002b1a:	eb12 0804 	adds.w	r8, r2, r4
 8002b1e:	eb43 0905 	adc.w	r9, r3, r5
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	469a      	mov	sl, r3
 8002b2a:	4693      	mov	fp, r2
 8002b2c:	4652      	mov	r2, sl
 8002b2e:	465b      	mov	r3, fp
 8002b30:	4640      	mov	r0, r8
 8002b32:	4649      	mov	r1, r9
 8002b34:	f7fd fbc4 	bl	80002c0 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b46:	d308      	bcc.n	8002b5a <UART_SetConfig+0x3d2>
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b4e:	d204      	bcs.n	8002b5a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	e0c8      	b.n	8002cec <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002b60:	e0c4      	b.n	8002cec <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b6a:	d167      	bne.n	8002c3c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002b6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d828      	bhi.n	8002bc6 <UART_SetConfig+0x43e>
 8002b74:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <UART_SetConfig+0x3f4>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002ba1 	.word	0x08002ba1
 8002b80:	08002ba9 	.word	0x08002ba9
 8002b84:	08002bb1 	.word	0x08002bb1
 8002b88:	08002bc7 	.word	0x08002bc7
 8002b8c:	08002bb7 	.word	0x08002bb7
 8002b90:	08002bc7 	.word	0x08002bc7
 8002b94:	08002bc7 	.word	0x08002bc7
 8002b98:	08002bc7 	.word	0x08002bc7
 8002b9c:	08002bbf 	.word	0x08002bbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ba0:	f7ff f9ea 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ba6:	e014      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ba8:	f7ff f9fc 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bae:	e010      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d1c <UART_SetConfig+0x594>)
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bb4:	e00d      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bb6:	f7ff f971 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002bba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002bbc:	e009      	b.n	8002bd2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002bc4:	e005      	b.n	8002bd2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 8089 	beq.w	8002cec <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bde:	4a4e      	ldr	r2, [pc, #312]	@ (8002d18 <UART_SetConfig+0x590>)
 8002be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002be4:	461a      	mov	r2, r3
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bec:	005a      	lsls	r2, r3, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	085b      	lsrs	r3, r3, #1
 8002bf4:	441a      	add	r2, r3
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d916      	bls.n	8002c34 <UART_SetConfig+0x4ac>
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c0c:	d212      	bcs.n	8002c34 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f023 030f 	bic.w	r3, r3, #15
 8002c16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	085b      	lsrs	r3, r3, #1
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	8bfb      	ldrh	r3, [r7, #30]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	8bfa      	ldrh	r2, [r7, #30]
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e05b      	b.n	8002cec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002c3a:	e057      	b.n	8002cec <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c3c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d828      	bhi.n	8002c96 <UART_SetConfig+0x50e>
 8002c44:	a201      	add	r2, pc, #4	@ (adr r2, 8002c4c <UART_SetConfig+0x4c4>)
 8002c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c4a:	bf00      	nop
 8002c4c:	08002c71 	.word	0x08002c71
 8002c50:	08002c79 	.word	0x08002c79
 8002c54:	08002c81 	.word	0x08002c81
 8002c58:	08002c97 	.word	0x08002c97
 8002c5c:	08002c87 	.word	0x08002c87
 8002c60:	08002c97 	.word	0x08002c97
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002c97 	.word	0x08002c97
 8002c6c:	08002c8f 	.word	0x08002c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c70:	f7ff f982 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 8002c74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c76:	e014      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7ff f994 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c7e:	e010      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <UART_SetConfig+0x594>)
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c84:	e00d      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c86:	f7ff f909 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8002c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c8c:	e009      	b.n	8002ca2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c94:	e005      	b.n	8002ca2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d021      	beq.n	8002cec <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <UART_SetConfig+0x590>)
 8002cae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	085b      	lsrs	r3, r3, #1
 8002cc0:	441a      	add	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2b0f      	cmp	r3, #15
 8002cd0:	d909      	bls.n	8002ce6 <UART_SetConfig+0x55e>
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd8:	d205      	bcs.n	8002ce6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e002      	b.n	8002cec <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2200      	movs	r2, #0
 8002d06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002d08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3730      	adds	r7, #48	@ 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	08003fe0 	.word	0x08003fe0
 8002d1c:	00f42400 	.word	0x00f42400

08002d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	f003 0320 	and.w	r3, r3, #32
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01a      	beq.n	8002e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e1e:	d10a      	bne.n	8002e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
  }
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b098      	sub	sp, #96	@ 0x60
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e74:	f7fe f864 	bl	8000f40 <HAL_GetTick>
 8002e78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d12f      	bne.n	8002ee8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f88e 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d022      	beq.n	8002ee8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ec8:	e841 2300 	strex	r3, r2, [r1]
 8002ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1e6      	bne.n	8002ea2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e063      	b.n	8002fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	d149      	bne.n	8002f8a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ef6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efe:	2200      	movs	r2, #0
 8002f00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f857 	bl	8002fb8 <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d03c      	beq.n	8002f8a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	e853 3f00 	ldrex	r3, [r3]
 8002f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e6      	bne.n	8002f10 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3308      	adds	r3, #8
 8002f48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f023 0301 	bic.w	r3, r3, #1
 8002f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3308      	adds	r3, #8
 8002f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f62:	61fa      	str	r2, [r7, #28]
 8002f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	69b9      	ldr	r1, [r7, #24]
 8002f68:	69fa      	ldr	r2, [r7, #28]
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	617b      	str	r3, [r7, #20]
   return(result);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e5      	bne.n	8002f42 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e012      	b.n	8002fb0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2220      	movs	r2, #32
 8002f96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3758      	adds	r7, #88	@ 0x58
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc8:	e04f      	b.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fd0:	d04b      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fd ffb5 	bl	8000f40 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d302      	bcc.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e04e      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d037      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b80      	cmp	r3, #128	@ 0x80
 8002ffe:	d034      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b40      	cmp	r3, #64	@ 0x40
 8003004:	d031      	beq.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b08      	cmp	r3, #8
 8003012:	d110      	bne.n	8003036 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2208      	movs	r2, #8
 800301a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f838 	bl	8003092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2208      	movs	r2, #8
 8003026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e029      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003044:	d111      	bne.n	800306a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800304e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f81e 	bl	8003092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e00f      	b.n	800308a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	429a      	cmp	r2, r3
 8003086:	d0a0      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003092:	b480      	push	{r7}
 8003094:	b095      	sub	sp, #84	@ 0x54
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80030ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e6      	bne.n	800309a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3308      	adds	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	61fb      	str	r3, [r7, #28]
   return(result);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3308      	adds	r3, #8
 80030ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e3      	bne.n	80030cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d118      	bne.n	800313e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e853 3f00 	ldrex	r3, [r3]
 8003118:	60bb      	str	r3, [r7, #8]
   return(result);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f023 0310 	bic.w	r3, r3, #16
 8003120:	647b      	str	r3, [r7, #68]	@ 0x44
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312e:	6979      	ldr	r1, [r7, #20]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	e841 2300 	strex	r3, r2, [r1]
 8003136:	613b      	str	r3, [r7, #16]
   return(result);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1e6      	bne.n	800310c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003152:	bf00      	nop
 8003154:	3754      	adds	r7, #84	@ 0x54
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_UARTEx_DisableFifoMode+0x16>
 8003170:	2302      	movs	r3, #2
 8003172:	e027      	b.n	80031c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2224      	movs	r2, #36	@ 0x24
 8003180:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0201 	bic.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80031a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e02d      	b.n	8003244 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	@ 0x24
 80031f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f84f 	bl	80032c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003260:	2302      	movs	r3, #2
 8003262:	e02d      	b.n	80032c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2224      	movs	r2, #36	@ 0x24
 8003270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f811 	bl	80032c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d108      	bne.n	80032ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80032e8:	e031      	b.n	800334e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80032ea:	2308      	movs	r3, #8
 80032ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80032ee:	2308      	movs	r3, #8
 80032f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	0e5b      	lsrs	r3, r3, #25
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	0f5b      	lsrs	r3, r3, #29
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003312:	7bbb      	ldrb	r3, [r7, #14]
 8003314:	7b3a      	ldrb	r2, [r7, #12]
 8003316:	4911      	ldr	r1, [pc, #68]	@ (800335c <UARTEx_SetNbDataToProcess+0x94>)
 8003318:	5c8a      	ldrb	r2, [r1, r2]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800331e:	7b3a      	ldrb	r2, [r7, #12]
 8003320:	490f      	ldr	r1, [pc, #60]	@ (8003360 <UARTEx_SetNbDataToProcess+0x98>)
 8003322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003324:	fb93 f3f2 	sdiv	r3, r3, r2
 8003328:	b29a      	uxth	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	7b7a      	ldrb	r2, [r7, #13]
 8003334:	4909      	ldr	r1, [pc, #36]	@ (800335c <UARTEx_SetNbDataToProcess+0x94>)
 8003336:	5c8a      	ldrb	r2, [r1, r2]
 8003338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800333c:	7b7a      	ldrb	r2, [r7, #13]
 800333e:	4908      	ldr	r1, [pc, #32]	@ (8003360 <UARTEx_SetNbDataToProcess+0x98>)
 8003340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003342:	fb93 f3f2 	sdiv	r3, r3, r2
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800334e:	bf00      	nop
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	08003ff8 	.word	0x08003ff8
 8003360:	08004000 	.word	0x08004000

08003364 <sniprintf>:
 8003364:	b40c      	push	{r2, r3}
 8003366:	b530      	push	{r4, r5, lr}
 8003368:	4b17      	ldr	r3, [pc, #92]	@ (80033c8 <sniprintf+0x64>)
 800336a:	1e0c      	subs	r4, r1, #0
 800336c:	681d      	ldr	r5, [r3, #0]
 800336e:	b09d      	sub	sp, #116	@ 0x74
 8003370:	da08      	bge.n	8003384 <sniprintf+0x20>
 8003372:	238b      	movs	r3, #139	@ 0x8b
 8003374:	602b      	str	r3, [r5, #0]
 8003376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800337a:	b01d      	add	sp, #116	@ 0x74
 800337c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003380:	b002      	add	sp, #8
 8003382:	4770      	bx	lr
 8003384:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003388:	f8ad 3014 	strh.w	r3, [sp, #20]
 800338c:	bf14      	ite	ne
 800338e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003392:	4623      	moveq	r3, r4
 8003394:	9304      	str	r3, [sp, #16]
 8003396:	9307      	str	r3, [sp, #28]
 8003398:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800339c:	9002      	str	r0, [sp, #8]
 800339e:	9006      	str	r0, [sp, #24]
 80033a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80033a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80033a6:	ab21      	add	r3, sp, #132	@ 0x84
 80033a8:	a902      	add	r1, sp, #8
 80033aa:	4628      	mov	r0, r5
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	f000 f995 	bl	80036dc <_svfiprintf_r>
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	bfbc      	itt	lt
 80033b6:	238b      	movlt	r3, #139	@ 0x8b
 80033b8:	602b      	strlt	r3, [r5, #0]
 80033ba:	2c00      	cmp	r4, #0
 80033bc:	d0dd      	beq.n	800337a <sniprintf+0x16>
 80033be:	9b02      	ldr	r3, [sp, #8]
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	e7d9      	b.n	800337a <sniprintf+0x16>
 80033c6:	bf00      	nop
 80033c8:	2000000c 	.word	0x2000000c

080033cc <memset>:
 80033cc:	4402      	add	r2, r0
 80033ce:	4603      	mov	r3, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d100      	bne.n	80033d6 <memset+0xa>
 80033d4:	4770      	bx	lr
 80033d6:	f803 1b01 	strb.w	r1, [r3], #1
 80033da:	e7f9      	b.n	80033d0 <memset+0x4>

080033dc <__errno>:
 80033dc:	4b01      	ldr	r3, [pc, #4]	@ (80033e4 <__errno+0x8>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000000c 	.word	0x2000000c

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4d0d      	ldr	r5, [pc, #52]	@ (8003420 <__libc_init_array+0x38>)
 80033ec:	4c0d      	ldr	r4, [pc, #52]	@ (8003424 <__libc_init_array+0x3c>)
 80033ee:	1b64      	subs	r4, r4, r5
 80033f0:	10a4      	asrs	r4, r4, #2
 80033f2:	2600      	movs	r6, #0
 80033f4:	42a6      	cmp	r6, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	4d0b      	ldr	r5, [pc, #44]	@ (8003428 <__libc_init_array+0x40>)
 80033fa:	4c0c      	ldr	r4, [pc, #48]	@ (800342c <__libc_init_array+0x44>)
 80033fc:	f000 fc66 	bl	8003ccc <_init>
 8003400:	1b64      	subs	r4, r4, r5
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	2600      	movs	r6, #0
 8003406:	42a6      	cmp	r6, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003410:	4798      	blx	r3
 8003412:	3601      	adds	r6, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f855 3b04 	ldr.w	r3, [r5], #4
 800341a:	4798      	blx	r3
 800341c:	3601      	adds	r6, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	08004044 	.word	0x08004044
 8003424:	08004044 	.word	0x08004044
 8003428:	08004044 	.word	0x08004044
 800342c:	08004048 	.word	0x08004048

08003430 <__retarget_lock_acquire_recursive>:
 8003430:	4770      	bx	lr

08003432 <__retarget_lock_release_recursive>:
 8003432:	4770      	bx	lr

08003434 <_free_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4605      	mov	r5, r0
 8003438:	2900      	cmp	r1, #0
 800343a:	d041      	beq.n	80034c0 <_free_r+0x8c>
 800343c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003440:	1f0c      	subs	r4, r1, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	18e4      	addlt	r4, r4, r3
 8003448:	f000 f8e0 	bl	800360c <__malloc_lock>
 800344c:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <_free_r+0x90>)
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	b933      	cbnz	r3, 8003460 <_free_r+0x2c>
 8003452:	6063      	str	r3, [r4, #4]
 8003454:	6014      	str	r4, [r2, #0]
 8003456:	4628      	mov	r0, r5
 8003458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800345c:	f000 b8dc 	b.w	8003618 <__malloc_unlock>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d908      	bls.n	8003476 <_free_r+0x42>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	1821      	adds	r1, r4, r0
 8003468:	428b      	cmp	r3, r1
 800346a:	bf01      	itttt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	1809      	addeq	r1, r1, r0
 8003472:	6021      	streq	r1, [r4, #0]
 8003474:	e7ed      	b.n	8003452 <_free_r+0x1e>
 8003476:	461a      	mov	r2, r3
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b10b      	cbz	r3, 8003480 <_free_r+0x4c>
 800347c:	42a3      	cmp	r3, r4
 800347e:	d9fa      	bls.n	8003476 <_free_r+0x42>
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	1850      	adds	r0, r2, r1
 8003484:	42a0      	cmp	r0, r4
 8003486:	d10b      	bne.n	80034a0 <_free_r+0x6c>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	4401      	add	r1, r0
 800348c:	1850      	adds	r0, r2, r1
 800348e:	4283      	cmp	r3, r0
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	d1e0      	bne.n	8003456 <_free_r+0x22>
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	6053      	str	r3, [r2, #4]
 800349a:	4408      	add	r0, r1
 800349c:	6010      	str	r0, [r2, #0]
 800349e:	e7da      	b.n	8003456 <_free_r+0x22>
 80034a0:	d902      	bls.n	80034a8 <_free_r+0x74>
 80034a2:	230c      	movs	r3, #12
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	e7d6      	b.n	8003456 <_free_r+0x22>
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	1821      	adds	r1, r4, r0
 80034ac:	428b      	cmp	r3, r1
 80034ae:	bf04      	itt	eq
 80034b0:	6819      	ldreq	r1, [r3, #0]
 80034b2:	685b      	ldreq	r3, [r3, #4]
 80034b4:	6063      	str	r3, [r4, #4]
 80034b6:	bf04      	itt	eq
 80034b8:	1809      	addeq	r1, r1, r0
 80034ba:	6021      	streq	r1, [r4, #0]
 80034bc:	6054      	str	r4, [r2, #4]
 80034be:	e7ca      	b.n	8003456 <_free_r+0x22>
 80034c0:	bd38      	pop	{r3, r4, r5, pc}
 80034c2:	bf00      	nop
 80034c4:	200004ac 	.word	0x200004ac

080034c8 <sbrk_aligned>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	4e0f      	ldr	r6, [pc, #60]	@ (8003508 <sbrk_aligned+0x40>)
 80034cc:	460c      	mov	r4, r1
 80034ce:	6831      	ldr	r1, [r6, #0]
 80034d0:	4605      	mov	r5, r0
 80034d2:	b911      	cbnz	r1, 80034da <sbrk_aligned+0x12>
 80034d4:	f000 fba6 	bl	8003c24 <_sbrk_r>
 80034d8:	6030      	str	r0, [r6, #0]
 80034da:	4621      	mov	r1, r4
 80034dc:	4628      	mov	r0, r5
 80034de:	f000 fba1 	bl	8003c24 <_sbrk_r>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	d103      	bne.n	80034ee <sbrk_aligned+0x26>
 80034e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80034ea:	4620      	mov	r0, r4
 80034ec:	bd70      	pop	{r4, r5, r6, pc}
 80034ee:	1cc4      	adds	r4, r0, #3
 80034f0:	f024 0403 	bic.w	r4, r4, #3
 80034f4:	42a0      	cmp	r0, r4
 80034f6:	d0f8      	beq.n	80034ea <sbrk_aligned+0x22>
 80034f8:	1a21      	subs	r1, r4, r0
 80034fa:	4628      	mov	r0, r5
 80034fc:	f000 fb92 	bl	8003c24 <_sbrk_r>
 8003500:	3001      	adds	r0, #1
 8003502:	d1f2      	bne.n	80034ea <sbrk_aligned+0x22>
 8003504:	e7ef      	b.n	80034e6 <sbrk_aligned+0x1e>
 8003506:	bf00      	nop
 8003508:	200004a8 	.word	0x200004a8

0800350c <_malloc_r>:
 800350c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003510:	1ccd      	adds	r5, r1, #3
 8003512:	f025 0503 	bic.w	r5, r5, #3
 8003516:	3508      	adds	r5, #8
 8003518:	2d0c      	cmp	r5, #12
 800351a:	bf38      	it	cc
 800351c:	250c      	movcc	r5, #12
 800351e:	2d00      	cmp	r5, #0
 8003520:	4606      	mov	r6, r0
 8003522:	db01      	blt.n	8003528 <_malloc_r+0x1c>
 8003524:	42a9      	cmp	r1, r5
 8003526:	d904      	bls.n	8003532 <_malloc_r+0x26>
 8003528:	230c      	movs	r3, #12
 800352a:	6033      	str	r3, [r6, #0]
 800352c:	2000      	movs	r0, #0
 800352e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003608 <_malloc_r+0xfc>
 8003536:	f000 f869 	bl	800360c <__malloc_lock>
 800353a:	f8d8 3000 	ldr.w	r3, [r8]
 800353e:	461c      	mov	r4, r3
 8003540:	bb44      	cbnz	r4, 8003594 <_malloc_r+0x88>
 8003542:	4629      	mov	r1, r5
 8003544:	4630      	mov	r0, r6
 8003546:	f7ff ffbf 	bl	80034c8 <sbrk_aligned>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	4604      	mov	r4, r0
 800354e:	d158      	bne.n	8003602 <_malloc_r+0xf6>
 8003550:	f8d8 4000 	ldr.w	r4, [r8]
 8003554:	4627      	mov	r7, r4
 8003556:	2f00      	cmp	r7, #0
 8003558:	d143      	bne.n	80035e2 <_malloc_r+0xd6>
 800355a:	2c00      	cmp	r4, #0
 800355c:	d04b      	beq.n	80035f6 <_malloc_r+0xea>
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	4639      	mov	r1, r7
 8003562:	4630      	mov	r0, r6
 8003564:	eb04 0903 	add.w	r9, r4, r3
 8003568:	f000 fb5c 	bl	8003c24 <_sbrk_r>
 800356c:	4581      	cmp	r9, r0
 800356e:	d142      	bne.n	80035f6 <_malloc_r+0xea>
 8003570:	6821      	ldr	r1, [r4, #0]
 8003572:	1a6d      	subs	r5, r5, r1
 8003574:	4629      	mov	r1, r5
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff ffa6 	bl	80034c8 <sbrk_aligned>
 800357c:	3001      	adds	r0, #1
 800357e:	d03a      	beq.n	80035f6 <_malloc_r+0xea>
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	442b      	add	r3, r5
 8003584:	6023      	str	r3, [r4, #0]
 8003586:	f8d8 3000 	ldr.w	r3, [r8]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	bb62      	cbnz	r2, 80035e8 <_malloc_r+0xdc>
 800358e:	f8c8 7000 	str.w	r7, [r8]
 8003592:	e00f      	b.n	80035b4 <_malloc_r+0xa8>
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	1b52      	subs	r2, r2, r5
 8003598:	d420      	bmi.n	80035dc <_malloc_r+0xd0>
 800359a:	2a0b      	cmp	r2, #11
 800359c:	d917      	bls.n	80035ce <_malloc_r+0xc2>
 800359e:	1961      	adds	r1, r4, r5
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	6025      	str	r5, [r4, #0]
 80035a4:	bf18      	it	ne
 80035a6:	6059      	strne	r1, [r3, #4]
 80035a8:	6863      	ldr	r3, [r4, #4]
 80035aa:	bf08      	it	eq
 80035ac:	f8c8 1000 	streq.w	r1, [r8]
 80035b0:	5162      	str	r2, [r4, r5]
 80035b2:	604b      	str	r3, [r1, #4]
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 f82f 	bl	8003618 <__malloc_unlock>
 80035ba:	f104 000b 	add.w	r0, r4, #11
 80035be:	1d23      	adds	r3, r4, #4
 80035c0:	f020 0007 	bic.w	r0, r0, #7
 80035c4:	1ac2      	subs	r2, r0, r3
 80035c6:	bf1c      	itt	ne
 80035c8:	1a1b      	subne	r3, r3, r0
 80035ca:	50a3      	strne	r3, [r4, r2]
 80035cc:	e7af      	b.n	800352e <_malloc_r+0x22>
 80035ce:	6862      	ldr	r2, [r4, #4]
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	bf0c      	ite	eq
 80035d4:	f8c8 2000 	streq.w	r2, [r8]
 80035d8:	605a      	strne	r2, [r3, #4]
 80035da:	e7eb      	b.n	80035b4 <_malloc_r+0xa8>
 80035dc:	4623      	mov	r3, r4
 80035de:	6864      	ldr	r4, [r4, #4]
 80035e0:	e7ae      	b.n	8003540 <_malloc_r+0x34>
 80035e2:	463c      	mov	r4, r7
 80035e4:	687f      	ldr	r7, [r7, #4]
 80035e6:	e7b6      	b.n	8003556 <_malloc_r+0x4a>
 80035e8:	461a      	mov	r2, r3
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	d1fb      	bne.n	80035e8 <_malloc_r+0xdc>
 80035f0:	2300      	movs	r3, #0
 80035f2:	6053      	str	r3, [r2, #4]
 80035f4:	e7de      	b.n	80035b4 <_malloc_r+0xa8>
 80035f6:	230c      	movs	r3, #12
 80035f8:	6033      	str	r3, [r6, #0]
 80035fa:	4630      	mov	r0, r6
 80035fc:	f000 f80c 	bl	8003618 <__malloc_unlock>
 8003600:	e794      	b.n	800352c <_malloc_r+0x20>
 8003602:	6005      	str	r5, [r0, #0]
 8003604:	e7d6      	b.n	80035b4 <_malloc_r+0xa8>
 8003606:	bf00      	nop
 8003608:	200004ac 	.word	0x200004ac

0800360c <__malloc_lock>:
 800360c:	4801      	ldr	r0, [pc, #4]	@ (8003614 <__malloc_lock+0x8>)
 800360e:	f7ff bf0f 	b.w	8003430 <__retarget_lock_acquire_recursive>
 8003612:	bf00      	nop
 8003614:	200004a4 	.word	0x200004a4

08003618 <__malloc_unlock>:
 8003618:	4801      	ldr	r0, [pc, #4]	@ (8003620 <__malloc_unlock+0x8>)
 800361a:	f7ff bf0a 	b.w	8003432 <__retarget_lock_release_recursive>
 800361e:	bf00      	nop
 8003620:	200004a4 	.word	0x200004a4

08003624 <__ssputs_r>:
 8003624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003628:	688e      	ldr	r6, [r1, #8]
 800362a:	461f      	mov	r7, r3
 800362c:	42be      	cmp	r6, r7
 800362e:	680b      	ldr	r3, [r1, #0]
 8003630:	4682      	mov	sl, r0
 8003632:	460c      	mov	r4, r1
 8003634:	4690      	mov	r8, r2
 8003636:	d82d      	bhi.n	8003694 <__ssputs_r+0x70>
 8003638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800363c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003640:	d026      	beq.n	8003690 <__ssputs_r+0x6c>
 8003642:	6965      	ldr	r5, [r4, #20]
 8003644:	6909      	ldr	r1, [r1, #16]
 8003646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800364a:	eba3 0901 	sub.w	r9, r3, r1
 800364e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003652:	1c7b      	adds	r3, r7, #1
 8003654:	444b      	add	r3, r9
 8003656:	106d      	asrs	r5, r5, #1
 8003658:	429d      	cmp	r5, r3
 800365a:	bf38      	it	cc
 800365c:	461d      	movcc	r5, r3
 800365e:	0553      	lsls	r3, r2, #21
 8003660:	d527      	bpl.n	80036b2 <__ssputs_r+0x8e>
 8003662:	4629      	mov	r1, r5
 8003664:	f7ff ff52 	bl	800350c <_malloc_r>
 8003668:	4606      	mov	r6, r0
 800366a:	b360      	cbz	r0, 80036c6 <__ssputs_r+0xa2>
 800366c:	6921      	ldr	r1, [r4, #16]
 800366e:	464a      	mov	r2, r9
 8003670:	f000 fae8 	bl	8003c44 <memcpy>
 8003674:	89a3      	ldrh	r3, [r4, #12]
 8003676:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800367a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367e:	81a3      	strh	r3, [r4, #12]
 8003680:	6126      	str	r6, [r4, #16]
 8003682:	6165      	str	r5, [r4, #20]
 8003684:	444e      	add	r6, r9
 8003686:	eba5 0509 	sub.w	r5, r5, r9
 800368a:	6026      	str	r6, [r4, #0]
 800368c:	60a5      	str	r5, [r4, #8]
 800368e:	463e      	mov	r6, r7
 8003690:	42be      	cmp	r6, r7
 8003692:	d900      	bls.n	8003696 <__ssputs_r+0x72>
 8003694:	463e      	mov	r6, r7
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	4632      	mov	r2, r6
 800369a:	4641      	mov	r1, r8
 800369c:	f000 faa8 	bl	8003bf0 <memmove>
 80036a0:	68a3      	ldr	r3, [r4, #8]
 80036a2:	1b9b      	subs	r3, r3, r6
 80036a4:	60a3      	str	r3, [r4, #8]
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	4433      	add	r3, r6
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	2000      	movs	r0, #0
 80036ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036b2:	462a      	mov	r2, r5
 80036b4:	f000 fad4 	bl	8003c60 <_realloc_r>
 80036b8:	4606      	mov	r6, r0
 80036ba:	2800      	cmp	r0, #0
 80036bc:	d1e0      	bne.n	8003680 <__ssputs_r+0x5c>
 80036be:	6921      	ldr	r1, [r4, #16]
 80036c0:	4650      	mov	r0, sl
 80036c2:	f7ff feb7 	bl	8003434 <_free_r>
 80036c6:	230c      	movs	r3, #12
 80036c8:	f8ca 3000 	str.w	r3, [sl]
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036d2:	81a3      	strh	r3, [r4, #12]
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036d8:	e7e9      	b.n	80036ae <__ssputs_r+0x8a>
	...

080036dc <_svfiprintf_r>:
 80036dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e0:	4698      	mov	r8, r3
 80036e2:	898b      	ldrh	r3, [r1, #12]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	b09d      	sub	sp, #116	@ 0x74
 80036e8:	4607      	mov	r7, r0
 80036ea:	460d      	mov	r5, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	d510      	bpl.n	8003712 <_svfiprintf_r+0x36>
 80036f0:	690b      	ldr	r3, [r1, #16]
 80036f2:	b973      	cbnz	r3, 8003712 <_svfiprintf_r+0x36>
 80036f4:	2140      	movs	r1, #64	@ 0x40
 80036f6:	f7ff ff09 	bl	800350c <_malloc_r>
 80036fa:	6028      	str	r0, [r5, #0]
 80036fc:	6128      	str	r0, [r5, #16]
 80036fe:	b930      	cbnz	r0, 800370e <_svfiprintf_r+0x32>
 8003700:	230c      	movs	r3, #12
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003708:	b01d      	add	sp, #116	@ 0x74
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370e:	2340      	movs	r3, #64	@ 0x40
 8003710:	616b      	str	r3, [r5, #20]
 8003712:	2300      	movs	r3, #0
 8003714:	9309      	str	r3, [sp, #36]	@ 0x24
 8003716:	2320      	movs	r3, #32
 8003718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800371c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003720:	2330      	movs	r3, #48	@ 0x30
 8003722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80038c0 <_svfiprintf_r+0x1e4>
 8003726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800372a:	f04f 0901 	mov.w	r9, #1
 800372e:	4623      	mov	r3, r4
 8003730:	469a      	mov	sl, r3
 8003732:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003736:	b10a      	cbz	r2, 800373c <_svfiprintf_r+0x60>
 8003738:	2a25      	cmp	r2, #37	@ 0x25
 800373a:	d1f9      	bne.n	8003730 <_svfiprintf_r+0x54>
 800373c:	ebba 0b04 	subs.w	fp, sl, r4
 8003740:	d00b      	beq.n	800375a <_svfiprintf_r+0x7e>
 8003742:	465b      	mov	r3, fp
 8003744:	4622      	mov	r2, r4
 8003746:	4629      	mov	r1, r5
 8003748:	4638      	mov	r0, r7
 800374a:	f7ff ff6b 	bl	8003624 <__ssputs_r>
 800374e:	3001      	adds	r0, #1
 8003750:	f000 80a7 	beq.w	80038a2 <_svfiprintf_r+0x1c6>
 8003754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003756:	445a      	add	r2, fp
 8003758:	9209      	str	r2, [sp, #36]	@ 0x24
 800375a:	f89a 3000 	ldrb.w	r3, [sl]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 809f 	beq.w	80038a2 <_svfiprintf_r+0x1c6>
 8003764:	2300      	movs	r3, #0
 8003766:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800376a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376e:	f10a 0a01 	add.w	sl, sl, #1
 8003772:	9304      	str	r3, [sp, #16]
 8003774:	9307      	str	r3, [sp, #28]
 8003776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800377a:	931a      	str	r3, [sp, #104]	@ 0x68
 800377c:	4654      	mov	r4, sl
 800377e:	2205      	movs	r2, #5
 8003780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003784:	484e      	ldr	r0, [pc, #312]	@ (80038c0 <_svfiprintf_r+0x1e4>)
 8003786:	f7fc fd4b 	bl	8000220 <memchr>
 800378a:	9a04      	ldr	r2, [sp, #16]
 800378c:	b9d8      	cbnz	r0, 80037c6 <_svfiprintf_r+0xea>
 800378e:	06d0      	lsls	r0, r2, #27
 8003790:	bf44      	itt	mi
 8003792:	2320      	movmi	r3, #32
 8003794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003798:	0711      	lsls	r1, r2, #28
 800379a:	bf44      	itt	mi
 800379c:	232b      	movmi	r3, #43	@ 0x2b
 800379e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037a2:	f89a 3000 	ldrb.w	r3, [sl]
 80037a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80037a8:	d015      	beq.n	80037d6 <_svfiprintf_r+0xfa>
 80037aa:	9a07      	ldr	r2, [sp, #28]
 80037ac:	4654      	mov	r4, sl
 80037ae:	2000      	movs	r0, #0
 80037b0:	f04f 0c0a 	mov.w	ip, #10
 80037b4:	4621      	mov	r1, r4
 80037b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037ba:	3b30      	subs	r3, #48	@ 0x30
 80037bc:	2b09      	cmp	r3, #9
 80037be:	d94b      	bls.n	8003858 <_svfiprintf_r+0x17c>
 80037c0:	b1b0      	cbz	r0, 80037f0 <_svfiprintf_r+0x114>
 80037c2:	9207      	str	r2, [sp, #28]
 80037c4:	e014      	b.n	80037f0 <_svfiprintf_r+0x114>
 80037c6:	eba0 0308 	sub.w	r3, r0, r8
 80037ca:	fa09 f303 	lsl.w	r3, r9, r3
 80037ce:	4313      	orrs	r3, r2
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	46a2      	mov	sl, r4
 80037d4:	e7d2      	b.n	800377c <_svfiprintf_r+0xa0>
 80037d6:	9b03      	ldr	r3, [sp, #12]
 80037d8:	1d19      	adds	r1, r3, #4
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	9103      	str	r1, [sp, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	bfbb      	ittet	lt
 80037e2:	425b      	neglt	r3, r3
 80037e4:	f042 0202 	orrlt.w	r2, r2, #2
 80037e8:	9307      	strge	r3, [sp, #28]
 80037ea:	9307      	strlt	r3, [sp, #28]
 80037ec:	bfb8      	it	lt
 80037ee:	9204      	strlt	r2, [sp, #16]
 80037f0:	7823      	ldrb	r3, [r4, #0]
 80037f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80037f4:	d10a      	bne.n	800380c <_svfiprintf_r+0x130>
 80037f6:	7863      	ldrb	r3, [r4, #1]
 80037f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80037fa:	d132      	bne.n	8003862 <_svfiprintf_r+0x186>
 80037fc:	9b03      	ldr	r3, [sp, #12]
 80037fe:	1d1a      	adds	r2, r3, #4
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	9203      	str	r2, [sp, #12]
 8003804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003808:	3402      	adds	r4, #2
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80038d0 <_svfiprintf_r+0x1f4>
 8003810:	7821      	ldrb	r1, [r4, #0]
 8003812:	2203      	movs	r2, #3
 8003814:	4650      	mov	r0, sl
 8003816:	f7fc fd03 	bl	8000220 <memchr>
 800381a:	b138      	cbz	r0, 800382c <_svfiprintf_r+0x150>
 800381c:	9b04      	ldr	r3, [sp, #16]
 800381e:	eba0 000a 	sub.w	r0, r0, sl
 8003822:	2240      	movs	r2, #64	@ 0x40
 8003824:	4082      	lsls	r2, r0
 8003826:	4313      	orrs	r3, r2
 8003828:	3401      	adds	r4, #1
 800382a:	9304      	str	r3, [sp, #16]
 800382c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003830:	4824      	ldr	r0, [pc, #144]	@ (80038c4 <_svfiprintf_r+0x1e8>)
 8003832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003836:	2206      	movs	r2, #6
 8003838:	f7fc fcf2 	bl	8000220 <memchr>
 800383c:	2800      	cmp	r0, #0
 800383e:	d036      	beq.n	80038ae <_svfiprintf_r+0x1d2>
 8003840:	4b21      	ldr	r3, [pc, #132]	@ (80038c8 <_svfiprintf_r+0x1ec>)
 8003842:	bb1b      	cbnz	r3, 800388c <_svfiprintf_r+0x1b0>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	3307      	adds	r3, #7
 8003848:	f023 0307 	bic.w	r3, r3, #7
 800384c:	3308      	adds	r3, #8
 800384e:	9303      	str	r3, [sp, #12]
 8003850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003852:	4433      	add	r3, r6
 8003854:	9309      	str	r3, [sp, #36]	@ 0x24
 8003856:	e76a      	b.n	800372e <_svfiprintf_r+0x52>
 8003858:	fb0c 3202 	mla	r2, ip, r2, r3
 800385c:	460c      	mov	r4, r1
 800385e:	2001      	movs	r0, #1
 8003860:	e7a8      	b.n	80037b4 <_svfiprintf_r+0xd8>
 8003862:	2300      	movs	r3, #0
 8003864:	3401      	adds	r4, #1
 8003866:	9305      	str	r3, [sp, #20]
 8003868:	4619      	mov	r1, r3
 800386a:	f04f 0c0a 	mov.w	ip, #10
 800386e:	4620      	mov	r0, r4
 8003870:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003874:	3a30      	subs	r2, #48	@ 0x30
 8003876:	2a09      	cmp	r2, #9
 8003878:	d903      	bls.n	8003882 <_svfiprintf_r+0x1a6>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0c6      	beq.n	800380c <_svfiprintf_r+0x130>
 800387e:	9105      	str	r1, [sp, #20]
 8003880:	e7c4      	b.n	800380c <_svfiprintf_r+0x130>
 8003882:	fb0c 2101 	mla	r1, ip, r1, r2
 8003886:	4604      	mov	r4, r0
 8003888:	2301      	movs	r3, #1
 800388a:	e7f0      	b.n	800386e <_svfiprintf_r+0x192>
 800388c:	ab03      	add	r3, sp, #12
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	462a      	mov	r2, r5
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <_svfiprintf_r+0x1f0>)
 8003894:	a904      	add	r1, sp, #16
 8003896:	4638      	mov	r0, r7
 8003898:	f3af 8000 	nop.w
 800389c:	1c42      	adds	r2, r0, #1
 800389e:	4606      	mov	r6, r0
 80038a0:	d1d6      	bne.n	8003850 <_svfiprintf_r+0x174>
 80038a2:	89ab      	ldrh	r3, [r5, #12]
 80038a4:	065b      	lsls	r3, r3, #25
 80038a6:	f53f af2d 	bmi.w	8003704 <_svfiprintf_r+0x28>
 80038aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038ac:	e72c      	b.n	8003708 <_svfiprintf_r+0x2c>
 80038ae:	ab03      	add	r3, sp, #12
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	462a      	mov	r2, r5
 80038b4:	4b05      	ldr	r3, [pc, #20]	@ (80038cc <_svfiprintf_r+0x1f0>)
 80038b6:	a904      	add	r1, sp, #16
 80038b8:	4638      	mov	r0, r7
 80038ba:	f000 f879 	bl	80039b0 <_printf_i>
 80038be:	e7ed      	b.n	800389c <_svfiprintf_r+0x1c0>
 80038c0:	08004008 	.word	0x08004008
 80038c4:	08004012 	.word	0x08004012
 80038c8:	00000000 	.word	0x00000000
 80038cc:	08003625 	.word	0x08003625
 80038d0:	0800400e 	.word	0x0800400e

080038d4 <_printf_common>:
 80038d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d8:	4616      	mov	r6, r2
 80038da:	4698      	mov	r8, r3
 80038dc:	688a      	ldr	r2, [r1, #8]
 80038de:	690b      	ldr	r3, [r1, #16]
 80038e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bfb8      	it	lt
 80038e8:	4613      	movlt	r3, r2
 80038ea:	6033      	str	r3, [r6, #0]
 80038ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038f0:	4607      	mov	r7, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	b10a      	cbz	r2, 80038fa <_printf_common+0x26>
 80038f6:	3301      	adds	r3, #1
 80038f8:	6033      	str	r3, [r6, #0]
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	0699      	lsls	r1, r3, #26
 80038fe:	bf42      	ittt	mi
 8003900:	6833      	ldrmi	r3, [r6, #0]
 8003902:	3302      	addmi	r3, #2
 8003904:	6033      	strmi	r3, [r6, #0]
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	f015 0506 	ands.w	r5, r5, #6
 800390c:	d106      	bne.n	800391c <_printf_common+0x48>
 800390e:	f104 0a19 	add.w	sl, r4, #25
 8003912:	68e3      	ldr	r3, [r4, #12]
 8003914:	6832      	ldr	r2, [r6, #0]
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	42ab      	cmp	r3, r5
 800391a:	dc26      	bgt.n	800396a <_printf_common+0x96>
 800391c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003920:	6822      	ldr	r2, [r4, #0]
 8003922:	3b00      	subs	r3, #0
 8003924:	bf18      	it	ne
 8003926:	2301      	movne	r3, #1
 8003928:	0692      	lsls	r2, r2, #26
 800392a:	d42b      	bmi.n	8003984 <_printf_common+0xb0>
 800392c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003930:	4641      	mov	r1, r8
 8003932:	4638      	mov	r0, r7
 8003934:	47c8      	blx	r9
 8003936:	3001      	adds	r0, #1
 8003938:	d01e      	beq.n	8003978 <_printf_common+0xa4>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	6922      	ldr	r2, [r4, #16]
 800393e:	f003 0306 	and.w	r3, r3, #6
 8003942:	2b04      	cmp	r3, #4
 8003944:	bf02      	ittt	eq
 8003946:	68e5      	ldreq	r5, [r4, #12]
 8003948:	6833      	ldreq	r3, [r6, #0]
 800394a:	1aed      	subeq	r5, r5, r3
 800394c:	68a3      	ldr	r3, [r4, #8]
 800394e:	bf0c      	ite	eq
 8003950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003954:	2500      	movne	r5, #0
 8003956:	4293      	cmp	r3, r2
 8003958:	bfc4      	itt	gt
 800395a:	1a9b      	subgt	r3, r3, r2
 800395c:	18ed      	addgt	r5, r5, r3
 800395e:	2600      	movs	r6, #0
 8003960:	341a      	adds	r4, #26
 8003962:	42b5      	cmp	r5, r6
 8003964:	d11a      	bne.n	800399c <_printf_common+0xc8>
 8003966:	2000      	movs	r0, #0
 8003968:	e008      	b.n	800397c <_printf_common+0xa8>
 800396a:	2301      	movs	r3, #1
 800396c:	4652      	mov	r2, sl
 800396e:	4641      	mov	r1, r8
 8003970:	4638      	mov	r0, r7
 8003972:	47c8      	blx	r9
 8003974:	3001      	adds	r0, #1
 8003976:	d103      	bne.n	8003980 <_printf_common+0xac>
 8003978:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800397c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003980:	3501      	adds	r5, #1
 8003982:	e7c6      	b.n	8003912 <_printf_common+0x3e>
 8003984:	18e1      	adds	r1, r4, r3
 8003986:	1c5a      	adds	r2, r3, #1
 8003988:	2030      	movs	r0, #48	@ 0x30
 800398a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800398e:	4422      	add	r2, r4
 8003990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003998:	3302      	adds	r3, #2
 800399a:	e7c7      	b.n	800392c <_printf_common+0x58>
 800399c:	2301      	movs	r3, #1
 800399e:	4622      	mov	r2, r4
 80039a0:	4641      	mov	r1, r8
 80039a2:	4638      	mov	r0, r7
 80039a4:	47c8      	blx	r9
 80039a6:	3001      	adds	r0, #1
 80039a8:	d0e6      	beq.n	8003978 <_printf_common+0xa4>
 80039aa:	3601      	adds	r6, #1
 80039ac:	e7d9      	b.n	8003962 <_printf_common+0x8e>
	...

080039b0 <_printf_i>:
 80039b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	7e0f      	ldrb	r7, [r1, #24]
 80039b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80039b8:	2f78      	cmp	r7, #120	@ 0x78
 80039ba:	4691      	mov	r9, r2
 80039bc:	4680      	mov	r8, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	469a      	mov	sl, r3
 80039c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039c6:	d807      	bhi.n	80039d8 <_printf_i+0x28>
 80039c8:	2f62      	cmp	r7, #98	@ 0x62
 80039ca:	d80a      	bhi.n	80039e2 <_printf_i+0x32>
 80039cc:	2f00      	cmp	r7, #0
 80039ce:	f000 80d2 	beq.w	8003b76 <_printf_i+0x1c6>
 80039d2:	2f58      	cmp	r7, #88	@ 0x58
 80039d4:	f000 80b9 	beq.w	8003b4a <_printf_i+0x19a>
 80039d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039e0:	e03a      	b.n	8003a58 <_printf_i+0xa8>
 80039e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039e6:	2b15      	cmp	r3, #21
 80039e8:	d8f6      	bhi.n	80039d8 <_printf_i+0x28>
 80039ea:	a101      	add	r1, pc, #4	@ (adr r1, 80039f0 <_printf_i+0x40>)
 80039ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039f0:	08003a49 	.word	0x08003a49
 80039f4:	08003a5d 	.word	0x08003a5d
 80039f8:	080039d9 	.word	0x080039d9
 80039fc:	080039d9 	.word	0x080039d9
 8003a00:	080039d9 	.word	0x080039d9
 8003a04:	080039d9 	.word	0x080039d9
 8003a08:	08003a5d 	.word	0x08003a5d
 8003a0c:	080039d9 	.word	0x080039d9
 8003a10:	080039d9 	.word	0x080039d9
 8003a14:	080039d9 	.word	0x080039d9
 8003a18:	080039d9 	.word	0x080039d9
 8003a1c:	08003b5d 	.word	0x08003b5d
 8003a20:	08003a87 	.word	0x08003a87
 8003a24:	08003b17 	.word	0x08003b17
 8003a28:	080039d9 	.word	0x080039d9
 8003a2c:	080039d9 	.word	0x080039d9
 8003a30:	08003b7f 	.word	0x08003b7f
 8003a34:	080039d9 	.word	0x080039d9
 8003a38:	08003a87 	.word	0x08003a87
 8003a3c:	080039d9 	.word	0x080039d9
 8003a40:	080039d9 	.word	0x080039d9
 8003a44:	08003b1f 	.word	0x08003b1f
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	1d1a      	adds	r2, r3, #4
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	6032      	str	r2, [r6, #0]
 8003a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e09d      	b.n	8003b98 <_printf_i+0x1e8>
 8003a5c:	6833      	ldr	r3, [r6, #0]
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	6031      	str	r1, [r6, #0]
 8003a64:	0606      	lsls	r6, r0, #24
 8003a66:	d501      	bpl.n	8003a6c <_printf_i+0xbc>
 8003a68:	681d      	ldr	r5, [r3, #0]
 8003a6a:	e003      	b.n	8003a74 <_printf_i+0xc4>
 8003a6c:	0645      	lsls	r5, r0, #25
 8003a6e:	d5fb      	bpl.n	8003a68 <_printf_i+0xb8>
 8003a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a74:	2d00      	cmp	r5, #0
 8003a76:	da03      	bge.n	8003a80 <_printf_i+0xd0>
 8003a78:	232d      	movs	r3, #45	@ 0x2d
 8003a7a:	426d      	negs	r5, r5
 8003a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a80:	4859      	ldr	r0, [pc, #356]	@ (8003be8 <_printf_i+0x238>)
 8003a82:	230a      	movs	r3, #10
 8003a84:	e011      	b.n	8003aaa <_printf_i+0xfa>
 8003a86:	6821      	ldr	r1, [r4, #0]
 8003a88:	6833      	ldr	r3, [r6, #0]
 8003a8a:	0608      	lsls	r0, r1, #24
 8003a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a90:	d402      	bmi.n	8003a98 <_printf_i+0xe8>
 8003a92:	0649      	lsls	r1, r1, #25
 8003a94:	bf48      	it	mi
 8003a96:	b2ad      	uxthmi	r5, r5
 8003a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a9a:	4853      	ldr	r0, [pc, #332]	@ (8003be8 <_printf_i+0x238>)
 8003a9c:	6033      	str	r3, [r6, #0]
 8003a9e:	bf14      	ite	ne
 8003aa0:	230a      	movne	r3, #10
 8003aa2:	2308      	moveq	r3, #8
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003aaa:	6866      	ldr	r6, [r4, #4]
 8003aac:	60a6      	str	r6, [r4, #8]
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	bfa2      	ittt	ge
 8003ab2:	6821      	ldrge	r1, [r4, #0]
 8003ab4:	f021 0104 	bicge.w	r1, r1, #4
 8003ab8:	6021      	strge	r1, [r4, #0]
 8003aba:	b90d      	cbnz	r5, 8003ac0 <_printf_i+0x110>
 8003abc:	2e00      	cmp	r6, #0
 8003abe:	d04b      	beq.n	8003b58 <_printf_i+0x1a8>
 8003ac0:	4616      	mov	r6, r2
 8003ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8003aca:	5dc7      	ldrb	r7, [r0, r7]
 8003acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ad0:	462f      	mov	r7, r5
 8003ad2:	42bb      	cmp	r3, r7
 8003ad4:	460d      	mov	r5, r1
 8003ad6:	d9f4      	bls.n	8003ac2 <_printf_i+0x112>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d10b      	bne.n	8003af4 <_printf_i+0x144>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	07df      	lsls	r7, r3, #31
 8003ae0:	d508      	bpl.n	8003af4 <_printf_i+0x144>
 8003ae2:	6923      	ldr	r3, [r4, #16]
 8003ae4:	6861      	ldr	r1, [r4, #4]
 8003ae6:	4299      	cmp	r1, r3
 8003ae8:	bfde      	ittt	le
 8003aea:	2330      	movle	r3, #48	@ 0x30
 8003aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003af0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003af4:	1b92      	subs	r2, r2, r6
 8003af6:	6122      	str	r2, [r4, #16]
 8003af8:	f8cd a000 	str.w	sl, [sp]
 8003afc:	464b      	mov	r3, r9
 8003afe:	aa03      	add	r2, sp, #12
 8003b00:	4621      	mov	r1, r4
 8003b02:	4640      	mov	r0, r8
 8003b04:	f7ff fee6 	bl	80038d4 <_printf_common>
 8003b08:	3001      	adds	r0, #1
 8003b0a:	d14a      	bne.n	8003ba2 <_printf_i+0x1f2>
 8003b0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b10:	b004      	add	sp, #16
 8003b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	f043 0320 	orr.w	r3, r3, #32
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	4833      	ldr	r0, [pc, #204]	@ (8003bec <_printf_i+0x23c>)
 8003b20:	2778      	movs	r7, #120	@ 0x78
 8003b22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	6831      	ldr	r1, [r6, #0]
 8003b2a:	061f      	lsls	r7, r3, #24
 8003b2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b30:	d402      	bmi.n	8003b38 <_printf_i+0x188>
 8003b32:	065f      	lsls	r7, r3, #25
 8003b34:	bf48      	it	mi
 8003b36:	b2ad      	uxthmi	r5, r5
 8003b38:	6031      	str	r1, [r6, #0]
 8003b3a:	07d9      	lsls	r1, r3, #31
 8003b3c:	bf44      	itt	mi
 8003b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b42:	6023      	strmi	r3, [r4, #0]
 8003b44:	b11d      	cbz	r5, 8003b4e <_printf_i+0x19e>
 8003b46:	2310      	movs	r3, #16
 8003b48:	e7ac      	b.n	8003aa4 <_printf_i+0xf4>
 8003b4a:	4827      	ldr	r0, [pc, #156]	@ (8003be8 <_printf_i+0x238>)
 8003b4c:	e7e9      	b.n	8003b22 <_printf_i+0x172>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	f023 0320 	bic.w	r3, r3, #32
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	e7f6      	b.n	8003b46 <_printf_i+0x196>
 8003b58:	4616      	mov	r6, r2
 8003b5a:	e7bd      	b.n	8003ad8 <_printf_i+0x128>
 8003b5c:	6833      	ldr	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	6961      	ldr	r1, [r4, #20]
 8003b62:	1d18      	adds	r0, r3, #4
 8003b64:	6030      	str	r0, [r6, #0]
 8003b66:	062e      	lsls	r6, r5, #24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	d501      	bpl.n	8003b70 <_printf_i+0x1c0>
 8003b6c:	6019      	str	r1, [r3, #0]
 8003b6e:	e002      	b.n	8003b76 <_printf_i+0x1c6>
 8003b70:	0668      	lsls	r0, r5, #25
 8003b72:	d5fb      	bpl.n	8003b6c <_printf_i+0x1bc>
 8003b74:	8019      	strh	r1, [r3, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	6123      	str	r3, [r4, #16]
 8003b7a:	4616      	mov	r6, r2
 8003b7c:	e7bc      	b.n	8003af8 <_printf_i+0x148>
 8003b7e:	6833      	ldr	r3, [r6, #0]
 8003b80:	1d1a      	adds	r2, r3, #4
 8003b82:	6032      	str	r2, [r6, #0]
 8003b84:	681e      	ldr	r6, [r3, #0]
 8003b86:	6862      	ldr	r2, [r4, #4]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f7fc fb48 	bl	8000220 <memchr>
 8003b90:	b108      	cbz	r0, 8003b96 <_printf_i+0x1e6>
 8003b92:	1b80      	subs	r0, r0, r6
 8003b94:	6060      	str	r0, [r4, #4]
 8003b96:	6863      	ldr	r3, [r4, #4]
 8003b98:	6123      	str	r3, [r4, #16]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ba0:	e7aa      	b.n	8003af8 <_printf_i+0x148>
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	4632      	mov	r2, r6
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	4640      	mov	r0, r8
 8003baa:	47d0      	blx	sl
 8003bac:	3001      	adds	r0, #1
 8003bae:	d0ad      	beq.n	8003b0c <_printf_i+0x15c>
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	079b      	lsls	r3, r3, #30
 8003bb4:	d413      	bmi.n	8003bde <_printf_i+0x22e>
 8003bb6:	68e0      	ldr	r0, [r4, #12]
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	4298      	cmp	r0, r3
 8003bbc:	bfb8      	it	lt
 8003bbe:	4618      	movlt	r0, r3
 8003bc0:	e7a6      	b.n	8003b10 <_printf_i+0x160>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4632      	mov	r2, r6
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	4640      	mov	r0, r8
 8003bca:	47d0      	blx	sl
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d09d      	beq.n	8003b0c <_printf_i+0x15c>
 8003bd0:	3501      	adds	r5, #1
 8003bd2:	68e3      	ldr	r3, [r4, #12]
 8003bd4:	9903      	ldr	r1, [sp, #12]
 8003bd6:	1a5b      	subs	r3, r3, r1
 8003bd8:	42ab      	cmp	r3, r5
 8003bda:	dcf2      	bgt.n	8003bc2 <_printf_i+0x212>
 8003bdc:	e7eb      	b.n	8003bb6 <_printf_i+0x206>
 8003bde:	2500      	movs	r5, #0
 8003be0:	f104 0619 	add.w	r6, r4, #25
 8003be4:	e7f5      	b.n	8003bd2 <_printf_i+0x222>
 8003be6:	bf00      	nop
 8003be8:	08004019 	.word	0x08004019
 8003bec:	0800402a 	.word	0x0800402a

08003bf0 <memmove>:
 8003bf0:	4288      	cmp	r0, r1
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	eb01 0402 	add.w	r4, r1, r2
 8003bf8:	d902      	bls.n	8003c00 <memmove+0x10>
 8003bfa:	4284      	cmp	r4, r0
 8003bfc:	4623      	mov	r3, r4
 8003bfe:	d807      	bhi.n	8003c10 <memmove+0x20>
 8003c00:	1e43      	subs	r3, r0, #1
 8003c02:	42a1      	cmp	r1, r4
 8003c04:	d008      	beq.n	8003c18 <memmove+0x28>
 8003c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c0e:	e7f8      	b.n	8003c02 <memmove+0x12>
 8003c10:	4402      	add	r2, r0
 8003c12:	4601      	mov	r1, r0
 8003c14:	428a      	cmp	r2, r1
 8003c16:	d100      	bne.n	8003c1a <memmove+0x2a>
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c22:	e7f7      	b.n	8003c14 <memmove+0x24>

08003c24 <_sbrk_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d06      	ldr	r5, [pc, #24]	@ (8003c40 <_sbrk_r+0x1c>)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4604      	mov	r4, r0
 8003c2c:	4608      	mov	r0, r1
 8003c2e:	602b      	str	r3, [r5, #0]
 8003c30:	f7fc fdf2 	bl	8000818 <_sbrk>
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d102      	bne.n	8003c3e <_sbrk_r+0x1a>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	b103      	cbz	r3, 8003c3e <_sbrk_r+0x1a>
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	bd38      	pop	{r3, r4, r5, pc}
 8003c40:	200004a0 	.word	0x200004a0

08003c44 <memcpy>:
 8003c44:	440a      	add	r2, r1
 8003c46:	4291      	cmp	r1, r2
 8003c48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003c4c:	d100      	bne.n	8003c50 <memcpy+0xc>
 8003c4e:	4770      	bx	lr
 8003c50:	b510      	push	{r4, lr}
 8003c52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c5a:	4291      	cmp	r1, r2
 8003c5c:	d1f9      	bne.n	8003c52 <memcpy+0xe>
 8003c5e:	bd10      	pop	{r4, pc}

08003c60 <_realloc_r>:
 8003c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c64:	4680      	mov	r8, r0
 8003c66:	4615      	mov	r5, r2
 8003c68:	460c      	mov	r4, r1
 8003c6a:	b921      	cbnz	r1, 8003c76 <_realloc_r+0x16>
 8003c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c70:	4611      	mov	r1, r2
 8003c72:	f7ff bc4b 	b.w	800350c <_malloc_r>
 8003c76:	b92a      	cbnz	r2, 8003c84 <_realloc_r+0x24>
 8003c78:	f7ff fbdc 	bl	8003434 <_free_r>
 8003c7c:	2400      	movs	r4, #0
 8003c7e:	4620      	mov	r0, r4
 8003c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c84:	f000 f81a 	bl	8003cbc <_malloc_usable_size_r>
 8003c88:	4285      	cmp	r5, r0
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	d802      	bhi.n	8003c94 <_realloc_r+0x34>
 8003c8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003c92:	d8f4      	bhi.n	8003c7e <_realloc_r+0x1e>
 8003c94:	4629      	mov	r1, r5
 8003c96:	4640      	mov	r0, r8
 8003c98:	f7ff fc38 	bl	800350c <_malloc_r>
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d0ec      	beq.n	8003c7c <_realloc_r+0x1c>
 8003ca2:	42b5      	cmp	r5, r6
 8003ca4:	462a      	mov	r2, r5
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	bf28      	it	cs
 8003caa:	4632      	movcs	r2, r6
 8003cac:	f7ff ffca 	bl	8003c44 <memcpy>
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	4640      	mov	r0, r8
 8003cb4:	f7ff fbbe 	bl	8003434 <_free_r>
 8003cb8:	463c      	mov	r4, r7
 8003cba:	e7e0      	b.n	8003c7e <_realloc_r+0x1e>

08003cbc <_malloc_usable_size_r>:
 8003cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc0:	1f18      	subs	r0, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfbc      	itt	lt
 8003cc6:	580b      	ldrlt	r3, [r1, r0]
 8003cc8:	18c0      	addlt	r0, r0, r3
 8003cca:	4770      	bx	lr

08003ccc <_init>:
 8003ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cce:	bf00      	nop
 8003cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd2:	bc08      	pop	{r3}
 8003cd4:	469e      	mov	lr, r3
 8003cd6:	4770      	bx	lr

08003cd8 <_fini>:
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	bf00      	nop
 8003cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cde:	bc08      	pop	{r3}
 8003ce0:	469e      	mov	lr, r3
 8003ce2:	4770      	bx	lr
